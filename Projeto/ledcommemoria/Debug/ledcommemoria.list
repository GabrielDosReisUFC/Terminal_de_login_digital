
ledcommemoria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004224  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800431c  0800431c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800431c  0800431c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800431c  0800431c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08004324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200000c0  080043e4  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080043e4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb29  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b85  00000000  00000000  0002bc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff15  00000000  00000000  0002e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d352  00000000  00000000  0003e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e5c4  00000000  00000000  0004bc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa20b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020f8  00000000  00000000  000aa25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c0 	.word	0x200000c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042cc 	.word	0x080042cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c4 	.word	0x200000c4
 8000104:	080042cc 	.word	0x080042cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	801a      	strh	r2, [r3, #0]
	if ((size+offset)<PAGE_SIZE) return size;
 8000232:	1dbb      	adds	r3, r7, #6
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	18d3      	adds	r3, r2, r3
 800023c:	2b3f      	cmp	r3, #63	; 0x3f
 800023e:	dc02      	bgt.n	8000246 <bytestowrite+0x26>
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	e004      	b.n	8000250 <bytestowrite+0x30>
	else return PAGE_SIZE-offset;
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2240      	movs	r2, #64	; 0x40
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	b29b      	uxth	r3, r3
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	b08f      	sub	sp, #60	; 0x3c
 800025c:	af04      	add	r7, sp, #16
 800025e:	0004      	movs	r4, r0
 8000260:	0008      	movs	r0, r1
 8000262:	60ba      	str	r2, [r7, #8]
 8000264:	0019      	movs	r1, r3
 8000266:	250e      	movs	r5, #14
 8000268:	197b      	adds	r3, r7, r5
 800026a:	1c22      	adds	r2, r4, #0
 800026c:	801a      	strh	r2, [r3, #0]
 800026e:	240c      	movs	r4, #12
 8000270:	193b      	adds	r3, r7, r4
 8000272:	1c02      	adds	r2, r0, #0
 8000274:	801a      	strh	r2, [r3, #0]
 8000276:	1dbb      	adds	r3, r7, #6
 8000278:	1c0a      	adds	r2, r1, #0
 800027a:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 800027c:	2306      	movs	r3, #6
 800027e:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000280:	2326      	movs	r3, #38	; 0x26
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	197a      	adds	r2, r7, r5
 8000286:	8812      	ldrh	r2, [r2, #0]
 8000288:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800028a:	1dbb      	adds	r3, r7, #6
 800028c:	881a      	ldrh	r2, [r3, #0]
 800028e:	193b      	adds	r3, r7, r4
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	18d3      	adds	r3, r2, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	da00      	bge.n	800029a <EEPROM_Write+0x42>
 8000298:	333f      	adds	r3, #63	; 0x3f
 800029a:	119b      	asrs	r3, r3, #6
 800029c:	b299      	uxth	r1, r3
 800029e:	201a      	movs	r0, #26
 80002a0:	183b      	adds	r3, r7, r0
 80002a2:	220e      	movs	r2, #14
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	8812      	ldrh	r2, [r2, #0]
 80002a8:	188a      	adds	r2, r1, r2
 80002aa:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80002ac:	183a      	adds	r2, r7, r0
 80002ae:	2326      	movs	r3, #38	; 0x26
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	8812      	ldrh	r2, [r2, #0]
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	2318      	movs	r3, #24
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	3201      	adds	r2, #1
 80002c0:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80002c2:	2324      	movs	r3, #36	; 0x24
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	2200      	movs	r2, #0
 80002c8:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
 80002ce:	e04d      	b.n	800036c <EEPROM_Write+0x114>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80002d0:	2626      	movs	r6, #38	; 0x26
 80002d2:	19bb      	adds	r3, r7, r6
 80002d4:	881a      	ldrh	r2, [r3, #0]
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	409a      	lsls	r2, r3
 80002da:	0013      	movs	r3, r2
 80002dc:	b21a      	sxth	r2, r3
 80002de:	210c      	movs	r1, #12
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2000      	movs	r0, #0
 80002e4:	5e1b      	ldrsh	r3, [r3, r0]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b21a      	sxth	r2, r3
 80002ea:	2316      	movs	r3, #22
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80002f0:	2514      	movs	r5, #20
 80002f2:	197c      	adds	r4, r7, r5
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	881a      	ldrh	r2, [r3, #0]
 80002f8:	1dbb      	adds	r3, r7, #6
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff8e 	bl	8000220 <bytestowrite>
 8000304:	0003      	movs	r3, r0
 8000306:	8023      	strh	r3, [r4, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000308:	2424      	movs	r4, #36	; 0x24
 800030a:	193b      	adds	r3, r7, r4
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	2216      	movs	r2, #22
 8000314:	18ba      	adds	r2, r7, r2
 8000316:	8811      	ldrh	r1, [r2, #0]
 8000318:	481a      	ldr	r0, [pc, #104]	; (8000384 <EEPROM_Write+0x12c>)
 800031a:	22fa      	movs	r2, #250	; 0xfa
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	9202      	str	r2, [sp, #8]
 8000320:	197a      	adds	r2, r7, r5
 8000322:	8812      	ldrh	r2, [r2, #0]
 8000324:	9201      	str	r2, [sp, #4]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2302      	movs	r3, #2
 800032a:	000a      	movs	r2, r1
 800032c:	21a0      	movs	r1, #160	; 0xa0
 800032e:	f002 f907 	bl	8002540 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000332:	19bb      	adds	r3, r7, r6
 8000334:	19ba      	adds	r2, r7, r6
 8000336:	8812      	ldrh	r2, [r2, #0]
 8000338:	3201      	adds	r2, #1
 800033a:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800033c:	210c      	movs	r1, #12
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	1db9      	adds	r1, r7, #6
 8000348:	197a      	adds	r2, r7, r5
 800034a:	8809      	ldrh	r1, [r1, #0]
 800034c:	8812      	ldrh	r2, [r2, #0]
 800034e:	1a8a      	subs	r2, r1, r2
 8000350:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 8000352:	193b      	adds	r3, r7, r4
 8000354:	1939      	adds	r1, r7, r4
 8000356:	197a      	adds	r2, r7, r5
 8000358:	8809      	ldrh	r1, [r1, #0]
 800035a:	8812      	ldrh	r2, [r2, #0]
 800035c:	188a      	adds	r2, r1, r2
 800035e:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000360:	2005      	movs	r0, #5
 8000362:	f001 fdd5 	bl	8001f10 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000366:	6a3b      	ldr	r3, [r7, #32]
 8000368:	3301      	adds	r3, #1
 800036a:	623b      	str	r3, [r7, #32]
 800036c:	2318      	movs	r3, #24
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	6a3a      	ldr	r2, [r7, #32]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbab      	blt.n	80002d0 <EEPROM_Write+0x78>
	}
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b00b      	add	sp, #44	; 0x2c
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	200000dc 	.word	0x200000dc

08000388 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038a:	b08f      	sub	sp, #60	; 0x3c
 800038c:	af04      	add	r7, sp, #16
 800038e:	0004      	movs	r4, r0
 8000390:	0008      	movs	r0, r1
 8000392:	60ba      	str	r2, [r7, #8]
 8000394:	0019      	movs	r1, r3
 8000396:	250e      	movs	r5, #14
 8000398:	197b      	adds	r3, r7, r5
 800039a:	1c22      	adds	r2, r4, #0
 800039c:	801a      	strh	r2, [r3, #0]
 800039e:	240c      	movs	r4, #12
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	1c02      	adds	r2, r0, #0
 80003a4:	801a      	strh	r2, [r3, #0]
 80003a6:	1dbb      	adds	r3, r7, #6
 80003a8:	1c0a      	adds	r2, r1, #0
 80003aa:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80003ac:	2306      	movs	r3, #6
 80003ae:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80003b0:	2326      	movs	r3, #38	; 0x26
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	197a      	adds	r2, r7, r5
 80003b6:	8812      	ldrh	r2, [r2, #0]
 80003b8:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80003ba:	1dbb      	adds	r3, r7, #6
 80003bc:	881a      	ldrh	r2, [r3, #0]
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	18d3      	adds	r3, r2, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	da00      	bge.n	80003ca <EEPROM_Read+0x42>
 80003c8:	333f      	adds	r3, #63	; 0x3f
 80003ca:	119b      	asrs	r3, r3, #6
 80003cc:	b299      	uxth	r1, r3
 80003ce:	201a      	movs	r0, #26
 80003d0:	183b      	adds	r3, r7, r0
 80003d2:	220e      	movs	r2, #14
 80003d4:	18ba      	adds	r2, r7, r2
 80003d6:	8812      	ldrh	r2, [r2, #0]
 80003d8:	188a      	adds	r2, r1, r2
 80003da:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 80003dc:	183a      	adds	r2, r7, r0
 80003de:	2326      	movs	r3, #38	; 0x26
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	8812      	ldrh	r2, [r2, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	2318      	movs	r3, #24
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	3201      	adds	r2, #1
 80003f0:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80003f2:	2324      	movs	r3, #36	; 0x24
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	2200      	movs	r2, #0
 80003f8:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
 80003fe:	e04a      	b.n	8000496 <EEPROM_Read+0x10e>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000400:	2626      	movs	r6, #38	; 0x26
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	881a      	ldrh	r2, [r3, #0]
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	409a      	lsls	r2, r3
 800040a:	0013      	movs	r3, r2
 800040c:	b21a      	sxth	r2, r3
 800040e:	210c      	movs	r1, #12
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2000      	movs	r0, #0
 8000414:	5e1b      	ldrsh	r3, [r3, r0]
 8000416:	4313      	orrs	r3, r2
 8000418:	b21a      	sxth	r2, r3
 800041a:	2316      	movs	r3, #22
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000420:	2514      	movs	r5, #20
 8000422:	197c      	adds	r4, r7, r5
 8000424:	187b      	adds	r3, r7, r1
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	1dbb      	adds	r3, r7, #6
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff fef6 	bl	8000220 <bytestowrite>
 8000434:	0003      	movs	r3, r0
 8000436:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000438:	2424      	movs	r4, #36	; 0x24
 800043a:	193b      	adds	r3, r7, r4
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	2216      	movs	r2, #22
 8000444:	18ba      	adds	r2, r7, r2
 8000446:	8811      	ldrh	r1, [r2, #0]
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <EEPROM_Read+0x124>)
 800044a:	22fa      	movs	r2, #250	; 0xfa
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	9202      	str	r2, [sp, #8]
 8000450:	197a      	adds	r2, r7, r5
 8000452:	8812      	ldrh	r2, [r2, #0]
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2302      	movs	r3, #2
 800045a:	000a      	movs	r2, r1
 800045c:	21a0      	movs	r1, #160	; 0xa0
 800045e:	f002 f99d 	bl	800279c <HAL_I2C_Mem_Read>
		startPage += 1;
 8000462:	19bb      	adds	r3, r7, r6
 8000464:	19ba      	adds	r2, r7, r6
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	3201      	adds	r2, #1
 800046a:	801a      	strh	r2, [r3, #0]
		offset=0;
 800046c:	210c      	movs	r1, #12
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	1db9      	adds	r1, r7, #6
 8000478:	197a      	adds	r2, r7, r5
 800047a:	8809      	ldrh	r1, [r1, #0]
 800047c:	8812      	ldrh	r2, [r2, #0]
 800047e:	1a8a      	subs	r2, r1, r2
 8000480:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	1939      	adds	r1, r7, r4
 8000486:	197a      	adds	r2, r7, r5
 8000488:	8809      	ldrh	r1, [r1, #0]
 800048a:	8812      	ldrh	r2, [r2, #0]
 800048c:	188a      	adds	r2, r1, r2
 800048e:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8000490:	6a3b      	ldr	r3, [r7, #32]
 8000492:	3301      	adds	r3, #1
 8000494:	623b      	str	r3, [r7, #32]
 8000496:	2318      	movs	r3, #24
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	6a3a      	ldr	r2, [r7, #32]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbae      	blt.n	8000400 <EEPROM_Read+0x78>
	}
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ac:	200000dc 	.word	0x200000dc

080004b0 <TM1637_ClkHigh>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 80004b4:	2390      	movs	r3, #144	; 0x90
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	2201      	movs	r2, #1
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 ff8c 	bl	80023da <HAL_GPIO_WritePin>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2200      	movs	r2, #0
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 ff80 	bl	80023da <HAL_GPIO_WritePin>
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_SET);
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <TM1637_DataHigh+0x18>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	2102      	movs	r1, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 ff75 	bl	80023da <HAL_GPIO_WritePin>
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	48000400 	.word	0x48000400

080004fc <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <TM1637_DataLow+0x18>)
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	0018      	movs	r0, r3
 8000508:	f001 ff67 	bl	80023da <HAL_GPIO_WritePin>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	48000400 	.word	0x48000400

08000518 <TM1637_SetBrightness>:
}

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	0002      	movs	r2, r0
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	701a      	strb	r2, [r3, #0]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8000524:	f000 f80f 	bl	8000546 <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b79      	subs	r3, #121	; 0x79
 800052e:	b2db      	uxtb	r3, r3
 8000530:	0018      	movs	r0, r3
 8000532:	f000 f83d 	bl	80005b0 <TM1637_WriteByte>
    TM1637_ReadResult();
 8000536:	f000 f82a 	bl	800058e <TM1637_ReadResult>
    TM1637_Stop();
 800053a:	f000 f812 	bl	8000562 <TM1637_Stop>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}

08000546 <TM1637_Start>:

void TM1637_Start(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 800054a:	f7ff ffb1 	bl	80004b0 <TM1637_ClkHigh>
    TM1637_DataHigh();
 800054e:	f7ff ffc7 	bl	80004e0 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8000552:	2002      	movs	r0, #2
 8000554:	f000 f859 	bl	800060a <TM1637_DelayUsec>
    TM1637_DataLow();
 8000558:	f7ff ffd0 	bl	80004fc <TM1637_DataLow>
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8000566:	f7ff ffaf 	bl	80004c8 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 800056a:	2002      	movs	r0, #2
 800056c:	f000 f84d 	bl	800060a <TM1637_DelayUsec>
    TM1637_DataLow();
 8000570:	f7ff ffc4 	bl	80004fc <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8000574:	2002      	movs	r0, #2
 8000576:	f000 f848 	bl	800060a <TM1637_DelayUsec>
    TM1637_ClkHigh();
 800057a:	f7ff ff99 	bl	80004b0 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 800057e:	2002      	movs	r0, #2
 8000580:	f000 f843 	bl	800060a <TM1637_DelayUsec>
    TM1637_DataHigh();
 8000584:	f7ff ffac 	bl	80004e0 <TM1637_DataHigh>
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8000592:	f7ff ff99 	bl	80004c8 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8000596:	2005      	movs	r0, #5
 8000598:	f000 f837 	bl	800060a <TM1637_DelayUsec>

    TM1637_ClkHigh();
 800059c:	f7ff ff88 	bl	80004b0 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 f832 	bl	800060a <TM1637_DelayUsec>
    TM1637_ClkLow();
 80005a6:	f7ff ff8f 	bl	80004c8 <TM1637_ClkLow>
}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	0002      	movs	r2, r0
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e01b      	b.n	80005fa <TM1637_WriteByte+0x4a>
		TM1637_ClkLow();
 80005c2:	f7ff ff81 	bl	80004c8 <TM1637_ClkLow>
		if (b & 0x01) {
 80005c6:	1dfb      	adds	r3, r7, #7
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	d002      	beq.n	80005d6 <TM1637_WriteByte+0x26>
			TM1637_DataHigh();
 80005d0:	f7ff ff86 	bl	80004e0 <TM1637_DataHigh>
 80005d4:	e001      	b.n	80005da <TM1637_WriteByte+0x2a>
		}
		else {
			TM1637_DataLow();
 80005d6:	f7ff ff91 	bl	80004fc <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 80005da:	2003      	movs	r0, #3
 80005dc:	f000 f815 	bl	800060a <TM1637_DelayUsec>
		b >>= 1;
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	1dfa      	adds	r2, r7, #7
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	0852      	lsrs	r2, r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
		TM1637_ClkHigh();
 80005ea:	f7ff ff61 	bl	80004b0 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 80005ee:	2003      	movs	r0, #3
 80005f0:	f000 f80b 	bl	800060a <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	dde0      	ble.n	80005c2 <TM1637_WriteByte+0x12>
	}
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}

0800060a <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8000612:	e00e      	b.n	8000632 <TM1637_DelayUsec+0x28>
        for (int j = 0; j < 500; ++j) {
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e003      	b.n	8000622 <TM1637_DelayUsec+0x18>
					__NOP();
 800061a:	46c0      	nop			; (mov r8, r8)
        for (int j = 0; j < 500; ++j) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	23fa      	movs	r3, #250	; 0xfa
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf6      	blt.n	800061a <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3b01      	subs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1ed      	bne.n	8000614 <TM1637_DelayUsec+0xa>
        }
    }
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b004      	add	sp, #16
 8000640:	bd80      	pop	{r7, pc}

08000642 <salva_senha>:
		  		  dataWrite[i] = 0;
		  	  }
	  	EEPROM_Write(0, 0, dataWrite, 9);
}

unsigned int salva_senha(int *vetorSenhas[], int conta){
 8000642:	b5b0      	push	{r4, r5, r7, lr}
 8000644:	b08a      	sub	sp, #40	; 0x28
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]

	uint8_t dataRead[5];
	uint8_t dataWrite[5];
	uint8_t new[1];

	for (int i=0; i<5; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
 8000650:	e008      	b.n	8000664 <salva_senha+0x22>
		  {
			  dataWrite[i] = 10;
 8000652:	2310      	movs	r3, #16
 8000654:	18fa      	adds	r2, r7, r3
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	220a      	movs	r2, #10
 800065c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<5; i++)
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	3301      	adds	r3, #1
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	2b04      	cmp	r3, #4
 8000668:	ddf3      	ble.n	8000652 <salva_senha+0x10>

		  }

	for (int i=0; i<conta; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
 800066e:	e019      	b.n	80006a4 <salva_senha+0x62>
	  {
		  dataWrite[i] = vetorSenhas[i];
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	b2d9      	uxtb	r1, r3
 800067c:	2010      	movs	r0, #16
 800067e:	183a      	adds	r2, r7, r0
 8000680:	6a3b      	ldr	r3, [r7, #32]
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	1c0a      	adds	r2, r1, #0
 8000686:	701a      	strb	r2, [r3, #0]
		  dataWrite[i] = dataWrite[i]-48;
 8000688:	183a      	adds	r2, r7, r0
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3b30      	subs	r3, #48	; 0x30
 8000692:	b2d9      	uxtb	r1, r3
 8000694:	183a      	adds	r2, r7, r0
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	18d3      	adds	r3, r2, r3
 800069a:	1c0a      	adds	r2, r1, #0
 800069c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<conta; i++)
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	3301      	adds	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
 80006a4:	6a3a      	ldr	r2, [r7, #32]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbe1      	blt.n	8000670 <salva_senha+0x2e>
	  }
	dataWrite[4] = conta;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	2510      	movs	r5, #16
 80006b2:	197b      	adds	r3, r7, r5
 80006b4:	711a      	strb	r2, [r3, #4]

	  EEPROM_Read(0, 0, dataRead, 5);
 80006b6:	2418      	movs	r4, #24
 80006b8:	193a      	adds	r2, r7, r4
 80006ba:	2305      	movs	r3, #5
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff fe62 	bl	8000388 <EEPROM_Read>

	  if(dataRead[0]<8){
 80006c4:	0022      	movs	r2, r4
 80006c6:	18bb      	adds	r3, r7, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d817      	bhi.n	80006fe <salva_senha+0xbc>
		  new[0] = dataRead[0]+1;
 80006ce:	18bb      	adds	r3, r7, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	210c      	movs	r1, #12
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	701a      	strb	r2, [r3, #0]
	  	  EEPROM_Write(0, 0, new, 1);
 80006dc:	000c      	movs	r4, r1
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	2301      	movs	r3, #1
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fdb7 	bl	8000258 <EEPROM_Write>
		  EEPROM_Write(new[0], 0, dataWrite, 5);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b298      	uxth	r0, r3
 80006f0:	197a      	adds	r2, r7, r5
 80006f2:	2305      	movs	r3, #5
 80006f4:	2100      	movs	r1, #0
 80006f6:	f7ff fdaf 	bl	8000258 <EEPROM_Write>

		  return 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <salva_senha+0xbe>
	  }
	  else{
		  return 0;
 80006fe:	2300      	movs	r3, #0
	  }
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b00a      	add	sp, #40	; 0x28
 8000706:	bdb0      	pop	{r4, r5, r7, pc}

08000708 <valida_senha>:

unsigned int valida_senha(int *vetorSenhas[], int conta){
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]

	uint8_t dataRead[5];
	uint8_t dataWrite[5];

	  int verif = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (int i=0; i<5; i++)
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
 800071a:	e008      	b.n	800072e <valida_senha+0x26>
			  {
				  dataWrite[i] = 10;
 800071c:	230c      	movs	r3, #12
 800071e:	18fa      	adds	r2, r7, r3
 8000720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000722:	18d3      	adds	r3, r2, r3
 8000724:	220a      	movs	r2, #10
 8000726:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<5; i++)
 8000728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072a:	3301      	adds	r3, #1
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
 800072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000730:	2b04      	cmp	r3, #4
 8000732:	ddf3      	ble.n	800071c <valida_senha+0x14>

			  }

		for (int i=0; i<conta; i++)
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
 8000738:	e019      	b.n	800076e <valida_senha+0x66>
		  {
			  dataWrite[i] = vetorSenhas[i];
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	b2d9      	uxtb	r1, r3
 8000746:	200c      	movs	r0, #12
 8000748:	183a      	adds	r2, r7, r0
 800074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074c:	18d3      	adds	r3, r2, r3
 800074e:	1c0a      	adds	r2, r1, #0
 8000750:	701a      	strb	r2, [r3, #0]
			  dataWrite[i] = dataWrite[i]-48;
 8000752:	183a      	adds	r2, r7, r0
 8000754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000756:	18d3      	adds	r3, r2, r3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3b30      	subs	r3, #48	; 0x30
 800075c:	b2d9      	uxtb	r1, r3
 800075e:	183a      	adds	r2, r7, r0
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	18d3      	adds	r3, r2, r3
 8000764:	1c0a      	adds	r2, r1, #0
 8000766:	701a      	strb	r2, [r3, #0]
		for (int i=0; i<conta; i++)
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	3301      	adds	r3, #1
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
 800076e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbe1      	blt.n	800073a <valida_senha+0x32>
		  }
		dataWrite[4] = conta;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	230c      	movs	r3, #12
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	711a      	strb	r2, [r3, #4]

	  for (int j=1; j<9; j++)
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	e029      	b.n	80007da <valida_senha+0xd2>
	  {
		  EEPROM_Read(j, 0, dataRead, 9);
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	b298      	uxth	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	18fa      	adds	r2, r7, r3
 800078e:	2309      	movs	r3, #9
 8000790:	2100      	movs	r1, #0
 8000792:	f7ff fdf9 	bl	8000388 <EEPROM_Read>
		  verif = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c

		  for(int i=0; i<5; i++){
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	e011      	b.n	80007c4 <valida_senha+0xbc>

			  if(dataRead[i] == dataWrite[i]){
 80007a0:	2314      	movs	r3, #20
 80007a2:	18fa      	adds	r2, r7, r3
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	18d3      	adds	r3, r2, r3
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	230c      	movs	r3, #12
 80007ac:	18f9      	adds	r1, r7, r3
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	18cb      	adds	r3, r1, r3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d102      	bne.n	80007be <valida_senha+0xb6>
				  verif++;
 80007b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ba:	3301      	adds	r3, #1
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		  for(int i=0; i<5; i++){
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61fb      	str	r3, [r7, #28]
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	ddea      	ble.n	80007a0 <valida_senha+0x98>
			  }
		  }
		  if(verif==5){
 80007ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d101      	bne.n	80007d4 <valida_senha+0xcc>
			  return 1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e006      	b.n	80007e2 <valida_senha+0xda>
	  for (int j=1; j<9; j++)
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	3301      	adds	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	2b08      	cmp	r3, #8
 80007de:	ddd2      	ble.n	8000786 <valida_senha+0x7e>
		  }
	  }
	  return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	0018      	movs	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00c      	add	sp, #48	; 0x30
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b0a9      	sub	sp, #164	; 0xa4
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f001 fb29 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f001 f897 	bl	8001928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f001 f96d 	bl	8001ad8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007fe:	f001 f8f9 	bl	80019f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000802:	f001 f937 	bl	8001a74 <MX_USART1_UART_Init>
  }
	*/


  //reseta_banco_senha();
  EEPROM_Read(0, 0, dataRead, 4);
 8000806:	4aed      	ldr	r2, [pc, #948]	; (8000bbc <main+0x3d0>)
 8000808:	2304      	movs	r3, #4
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fdbb 	bl	8000388 <EEPROM_Read>
  unsigned int senha = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	229c      	movs	r2, #156	; 0x9c
 8000816:	18ba      	adds	r2, r7, r2
 8000818:	6013      	str	r3, [r2, #0]

  unsigned int vetorSenhas[4];
  for (int i = 0; i < 4; ++i) {
 800081a:	2300      	movs	r3, #0
 800081c:	2298      	movs	r2, #152	; 0x98
 800081e:	18ba      	adds	r2, r7, r2
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e00d      	b.n	8000840 <main+0x54>
	  vetorSenhas[i] = 0;
 8000824:	2308      	movs	r3, #8
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2098      	movs	r0, #152	; 0x98
 800082a:	183a      	adds	r2, r7, r0
 800082c:	6812      	ldr	r2, [r2, #0]
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	2100      	movs	r1, #0
 8000832:	50d1      	str	r1, [r2, r3]
  for (int i = 0; i < 4; ++i) {
 8000834:	0002      	movs	r2, r0
 8000836:	18bb      	adds	r3, r7, r2
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	18ba      	adds	r2, r7, r2
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	2398      	movs	r3, #152	; 0x98
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b03      	cmp	r3, #3
 8000848:	ddec      	ble.n	8000824 <main+0x38>
  }

  int conta = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	2294      	movs	r2, #148	; 0x94
 800084e:	18ba      	adds	r2, r7, r2
 8000850:	6013      	str	r3, [r2, #0]
  data_read = 0;
 8000852:	4bdb      	ldr	r3, [pc, #876]	; (8000bc0 <main+0x3d4>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
  unsigned char myData;

  unsigned char digitArr[4];
  for (int i = 0; i < 4; ++i) {
 8000858:	2300      	movs	r3, #0
 800085a:	2290      	movs	r2, #144	; 0x90
 800085c:	18ba      	adds	r2, r7, r2
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	e00b      	b.n	800087a <main+0x8e>
      digitArr[i] = 0x08;
 8000862:	003a      	movs	r2, r7
 8000864:	2190      	movs	r1, #144	; 0x90
 8000866:	187b      	adds	r3, r7, r1
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	2208      	movs	r2, #8
 800086e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; ++i) {
 8000870:	187b      	adds	r3, r7, r1
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	187a      	adds	r2, r7, r1
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	2390      	movs	r3, #144	; 0x90
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	ddee      	ble.n	8000862 <main+0x76>
  }

  TM1637_Start();
 8000884:	f7ff fe5f 	bl	8000546 <TM1637_Start>
  TM1637_WriteByte(0x40);
 8000888:	2040      	movs	r0, #64	; 0x40
 800088a:	f7ff fe91 	bl	80005b0 <TM1637_WriteByte>
  TM1637_ReadResult();
 800088e:	f7ff fe7e 	bl	800058e <TM1637_ReadResult>
  TM1637_Stop();
 8000892:	f7ff fe66 	bl	8000562 <TM1637_Stop>

  TM1637_Start();
 8000896:	f7ff fe56 	bl	8000546 <TM1637_Start>
  TM1637_WriteByte(0xc0);
 800089a:	20c0      	movs	r0, #192	; 0xc0
 800089c:	f7ff fe88 	bl	80005b0 <TM1637_WriteByte>
  TM1637_ReadResult();
 80008a0:	f7ff fe75 	bl	800058e <TM1637_ReadResult>

  for (int i = 0; i < 4; ++i) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	228c      	movs	r2, #140	; 0x8c
 80008a8:	18ba      	adds	r2, r7, r2
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	e010      	b.n	80008d0 <main+0xe4>
      TM1637_WriteByte(digitArr[3 - i]);
 80008ae:	248c      	movs	r4, #140	; 0x8c
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2203      	movs	r2, #3
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	003a      	movs	r2, r7
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe77 	bl	80005b0 <TM1637_WriteByte>
      TM1637_ReadResult();
 80008c2:	f7ff fe64 	bl	800058e <TM1637_ReadResult>
  for (int i = 0; i < 4; ++i) {
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	193a      	adds	r2, r7, r4
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	238c      	movs	r3, #140	; 0x8c
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	dde9      	ble.n	80008ae <main+0xc2>
  }

  TM1637_Stop();
 80008da:	f7ff fe42 	bl	8000562 <TM1637_Stop>

  HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 80008de:	49b9      	ldr	r1, [pc, #740]	; (8000bc4 <main+0x3d8>)
 80008e0:	48b9      	ldr	r0, [pc, #740]	; (8000bc8 <main+0x3dc>)
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	2203      	movs	r2, #3
 80008e6:	f003 f91b 	bl	8003b20 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG)-1, 100);
 80008ea:	49b8      	ldr	r1, [pc, #736]	; (8000bcc <main+0x3e0>)
 80008ec:	48b6      	ldr	r0, [pc, #728]	; (8000bc8 <main+0x3dc>)
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	221f      	movs	r2, #31
 80008f2:	f003 f915 	bl	8003b20 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 80008f6:	49b3      	ldr	r1, [pc, #716]	; (8000bc4 <main+0x3d8>)
 80008f8:	48b3      	ldr	r0, [pc, #716]	; (8000bc8 <main+0x3dc>)
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	2203      	movs	r2, #3
 80008fe:	f003 f90f 	bl	8003b20 <HAL_UART_Transmit>


  //pisca pisca
  HAL_Delay(200);
 8000902:	20c8      	movs	r0, #200	; 0xc8
 8000904:	f001 fb04 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fe05 	bl	8000518 <TM1637_SetBrightness>
  HAL_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f001 fafe 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(7);
 8000914:	2007      	movs	r0, #7
 8000916:	f7ff fdff 	bl	8000518 <TM1637_SetBrightness>
  HAL_Delay(200);
 800091a:	20c8      	movs	r0, #200	; 0xc8
 800091c:	f001 faf8 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(0);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fdf9 	bl	8000518 <TM1637_SetBrightness>
  HAL_Delay(200);
 8000926:	20c8      	movs	r0, #200	; 0xc8
 8000928:	f001 faf2 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(7);
 800092c:	2007      	movs	r0, #7
 800092e:	f7ff fdf3 	bl	8000518 <TM1637_SetBrightness>
  HAL_Delay(200);
 8000932:	20c8      	movs	r0, #200	; 0xc8
 8000934:	f001 faec 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fded 	bl	8000518 <TM1637_SetBrightness>
  HAL_Delay(200);
 800093e:	20c8      	movs	r0, #200	; 0xc8
 8000940:	f001 fae6 	bl	8001f10 <HAL_Delay>
  TM1637_SetBrightness(7);
 8000944:	2007      	movs	r0, #7
 8000946:	f7ff fde7 	bl	8000518 <TM1637_SetBrightness>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char pressionado = 'a';
 800094a:	231b      	movs	r3, #27
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	2261      	movs	r2, #97	; 0x61
 8000950:	701a      	strb	r2, [r3, #0]

	      for (int i = 0; i < 4; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	2288      	movs	r2, #136	; 0x88
 8000956:	18ba      	adds	r2, r7, r2
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	f000 ffcf 	bl	80018fc <main+0x1110>

	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800095e:	2390      	movs	r3, #144	; 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fd37 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800096c:	2390      	movs	r3, #144	; 0x90
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2201      	movs	r2, #1
 8000972:	2102      	movs	r1, #2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fd30 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2201      	movs	r2, #1
 8000980:	2104      	movs	r1, #4
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fd29 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fd22 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000996:	2390      	movs	r3, #144	; 0x90
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fd1b 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009a4:	2390      	movs	r3, #144	; 0x90
 80009a6:	05db      	lsls	r3, r3, #23
 80009a8:	2201      	movs	r2, #1
 80009aa:	2120      	movs	r1, #32
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fd14 	bl	80023da <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009b2:	2390      	movs	r3, #144	; 0x90
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2201      	movs	r2, #1
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fd0d 	bl	80023da <HAL_GPIO_WritePin>

	        if (i == 0) {
 80009c0:	2388      	movs	r3, #136	; 0x88
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d107      	bne.n	80009da <main+0x1ee>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009ca:	2390      	movs	r3, #144	; 0x90
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 fd01 	bl	80023da <HAL_GPIO_WritePin>
 80009d8:	e025      	b.n	8000a26 <main+0x23a>
	        } else if (i == 1) {
 80009da:	2388      	movs	r3, #136	; 0x88
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d107      	bne.n	80009f4 <main+0x208>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fcf4 	bl	80023da <HAL_GPIO_WritePin>
 80009f2:	e018      	b.n	8000a26 <main+0x23a>
	        } else if (i == 2) {
 80009f4:	2388      	movs	r3, #136	; 0x88
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d107      	bne.n	8000a0e <main+0x222>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80009fe:	2390      	movs	r3, #144	; 0x90
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2200      	movs	r2, #0
 8000a04:	2104      	movs	r1, #4
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fce7 	bl	80023da <HAL_GPIO_WritePin>
 8000a0c:	e00b      	b.n	8000a26 <main+0x23a>
	        } else if (i == 3) {
 8000a0e:	2388      	movs	r3, #136	; 0x88
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d106      	bne.n	8000a26 <main+0x23a>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a18:	2390      	movs	r3, #144	; 0x90
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2108      	movs	r1, #8
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fcda 	bl	80023da <HAL_GPIO_WritePin>
	        }

	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0) {
 8000a26:	2390      	movs	r3, #144	; 0x90
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fcb7 	bl	80023a0 <HAL_GPIO_ReadPin>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d000      	beq.n	8000a38 <main+0x24c>
 8000a36:	e2df      	b.n	8000ff8 <main+0x80c>

	          if (i == 0) {
 8000a38:	2388      	movs	r3, #136	; 0x88
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d15b      	bne.n	8000afa <main+0x30e>
	            pressionado = '1';
 8000a42:	231b      	movs	r3, #27
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	2231      	movs	r2, #49	; 0x31
 8000a48:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8000a4a:	2194      	movs	r1, #148	; 0x94
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	dd01      	ble.n	8000a58 <main+0x26c>
 8000a54:	f000 ff4c 	bl	80018f0 <main+0x1104>
	            	  digitArr[conta] = 0x06;
 8000a58:	003a      	movs	r2, r7
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	2206      	movs	r2, #6
 8000a62:	701a      	strb	r2, [r3, #0]

	            	  TM1637_Start();
 8000a64:	f7ff fd6f 	bl	8000546 <TM1637_Start>
	            	  TM1637_WriteByte(0x40);
 8000a68:	2040      	movs	r0, #64	; 0x40
 8000a6a:	f7ff fda1 	bl	80005b0 <TM1637_WriteByte>
	            	  TM1637_ReadResult();
 8000a6e:	f7ff fd8e 	bl	800058e <TM1637_ReadResult>
	            	  TM1637_Stop();
 8000a72:	f7ff fd76 	bl	8000562 <TM1637_Stop>

	            	  TM1637_Start();
 8000a76:	f7ff fd66 	bl	8000546 <TM1637_Start>
	            	  TM1637_WriteByte(0xc0);
 8000a7a:	20c0      	movs	r0, #192	; 0xc0
 8000a7c:	f7ff fd98 	bl	80005b0 <TM1637_WriteByte>
	            	  TM1637_ReadResult();
 8000a80:	f7ff fd85 	bl	800058e <TM1637_ReadResult>

	            	  for (int i = 0; i < 4; ++i) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	2284      	movs	r2, #132	; 0x84
 8000a88:	18ba      	adds	r2, r7, r2
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e00f      	b.n	8000aae <main+0x2c2>
	            	      TM1637_WriteByte(digitArr[i]);
 8000a8e:	003a      	movs	r2, r7
 8000a90:	2484      	movs	r4, #132	; 0x84
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	18d3      	adds	r3, r2, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fd88 	bl	80005b0 <TM1637_WriteByte>
	            	      TM1637_ReadResult();
 8000aa0:	f7ff fd75 	bl	800058e <TM1637_ReadResult>
	            	  for (int i = 0; i < 4; ++i) {
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	193a      	adds	r2, r7, r4
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	2384      	movs	r3, #132	; 0x84
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	ddea      	ble.n	8000a8e <main+0x2a2>
	            	  }

	            	  TM1637_Stop();
 8000ab8:	f7ff fd53 	bl	8000562 <TM1637_Stop>

		            	senha = (senha*10)+1;
 8000abc:	219c      	movs	r1, #156	; 0x9c
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	189b      	adds	r3, r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	3301      	adds	r3, #1
 8000acc:	187a      	adds	r2, r7, r1
 8000ace:	6013      	str	r3, [r2, #0]
		            	vetorSenhas[conta]= 49;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2094      	movs	r0, #148	; 0x94
 8000ad6:	183a      	adds	r2, r7, r0
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	2131      	movs	r1, #49	; 0x31
 8000ade:	50d1      	str	r1, [r2, r3]
		            	conta++;
 8000ae0:	0002      	movs	r2, r0
 8000ae2:	18bb      	adds	r3, r7, r2
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	18ba      	adds	r2, r7, r2
 8000aea:	6013      	str	r3, [r2, #0]
		            	HAL_Delay(500);
 8000aec:	23fa      	movs	r3, #250	; 0xfa
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 fa0d 	bl	8001f10 <HAL_Delay>
 8000af6:	f000 fefb 	bl	80018f0 <main+0x1104>
	            }

	          } else if (i == 1) {
 8000afa:	2388      	movs	r3, #136	; 0x88
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d165      	bne.n	8000bd0 <main+0x3e4>
	            pressionado = '4';
 8000b04:	231b      	movs	r3, #27
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2234      	movs	r2, #52	; 0x34
 8000b0a:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8000b0c:	2194      	movs	r1, #148	; 0x94
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	dd01      	ble.n	8000b1a <main+0x32e>
 8000b16:	f000 feeb 	bl	80018f0 <main+0x1104>
	            	  digitArr[conta] = 0x66;
 8000b1a:	003a      	movs	r2, r7
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	18d3      	adds	r3, r2, r3
 8000b22:	2266      	movs	r2, #102	; 0x66
 8000b24:	701a      	strb	r2, [r3, #0]

	            	  TM1637_Start();
 8000b26:	f7ff fd0e 	bl	8000546 <TM1637_Start>
	            	  TM1637_WriteByte(0x40);
 8000b2a:	2040      	movs	r0, #64	; 0x40
 8000b2c:	f7ff fd40 	bl	80005b0 <TM1637_WriteByte>
	            	  TM1637_ReadResult();
 8000b30:	f7ff fd2d 	bl	800058e <TM1637_ReadResult>
	            	  TM1637_Stop();
 8000b34:	f7ff fd15 	bl	8000562 <TM1637_Stop>

	            	  TM1637_Start();
 8000b38:	f7ff fd05 	bl	8000546 <TM1637_Start>
	            	  TM1637_WriteByte(0xc0);
 8000b3c:	20c0      	movs	r0, #192	; 0xc0
 8000b3e:	f7ff fd37 	bl	80005b0 <TM1637_WriteByte>
	            	  TM1637_ReadResult();
 8000b42:	f7ff fd24 	bl	800058e <TM1637_ReadResult>

	            	  for (int i = 0; i < 4; ++i) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	18ba      	adds	r2, r7, r2
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e00f      	b.n	8000b70 <main+0x384>
	            	      TM1637_WriteByte(digitArr[i]);
 8000b50:	003a      	movs	r2, r7
 8000b52:	2480      	movs	r4, #128	; 0x80
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff fd27 	bl	80005b0 <TM1637_WriteByte>
	            	      TM1637_ReadResult();
 8000b62:	f7ff fd14 	bl	800058e <TM1637_ReadResult>
	            	  for (int i = 0; i < 4; ++i) {
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	193a      	adds	r2, r7, r4
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	ddea      	ble.n	8000b50 <main+0x364>
	            	  }

	            	  TM1637_Stop();
 8000b7a:	f7ff fcf2 	bl	8000562 <TM1637_Stop>

		            	senha = (senha*10)+4;
 8000b7e:	219c      	movs	r1, #156	; 0x9c
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	0013      	movs	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	189b      	adds	r3, r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	6013      	str	r3, [r2, #0]
		            	vetorSenhas[conta]= 52;
 8000b92:	2308      	movs	r3, #8
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	2094      	movs	r0, #148	; 0x94
 8000b98:	183a      	adds	r2, r7, r0
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	2134      	movs	r1, #52	; 0x34
 8000ba0:	50d1      	str	r1, [r2, r3]
		            	conta++;
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	18bb      	adds	r3, r7, r2
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	18ba      	adds	r2, r7, r2
 8000bac:	6013      	str	r3, [r2, #0]
		            	HAL_Delay(500);
 8000bae:	23fa      	movs	r3, #250	; 0xfa
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 f9ac 	bl	8001f10 <HAL_Delay>
 8000bb8:	f000 fe9a 	bl	80018f0 <main+0x1104>
 8000bbc:	200001b0 	.word	0x200001b0
 8000bc0:	200001ac 	.word	0x200001ac
 8000bc4:	200000b0 	.word	0x200000b0
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	20000000 	.word	0x20000000
	            }

	          } else if (i == 2) {
 8000bd0:	2388      	movs	r3, #136	; 0x88
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d153      	bne.n	8000c82 <main+0x496>
	            pressionado = '7';
 8000bda:	231b      	movs	r3, #27
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2237      	movs	r2, #55	; 0x37
 8000be0:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8000be2:	2194      	movs	r1, #148	; 0x94
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	dd01      	ble.n	8000bf0 <main+0x404>
 8000bec:	f000 fe80 	bl	80018f0 <main+0x1104>
					  digitArr[conta] = 0x07;
 8000bf0:	003a      	movs	r2, r7
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	18d3      	adds	r3, r2, r3
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 8000bfc:	f7ff fca3 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 8000c00:	2040      	movs	r0, #64	; 0x40
 8000c02:	f7ff fcd5 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8000c06:	f7ff fcc2 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 8000c0a:	f7ff fcaa 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 8000c0e:	f7ff fc9a 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 8000c12:	20c0      	movs	r0, #192	; 0xc0
 8000c14:	f7ff fccc 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8000c18:	f7ff fcb9 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c20:	e00b      	b.n	8000c3a <main+0x44e>
						  TM1637_WriteByte(digitArr[i]);
 8000c22:	003a      	movs	r2, r7
 8000c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fcc0 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 8000c30:	f7ff fcad 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 8000c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c36:	3301      	adds	r3, #1
 8000c38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	ddf0      	ble.n	8000c22 <main+0x436>
					  }

					  TM1637_Stop();
 8000c40:	f7ff fc8f 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+7;
 8000c44:	219c      	movs	r1, #156	; 0x9c
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	189b      	adds	r3, r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	3307      	adds	r3, #7
 8000c54:	187a      	adds	r2, r7, r1
 8000c56:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 55;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	2094      	movs	r0, #148	; 0x94
 8000c5e:	183a      	adds	r2, r7, r0
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	2137      	movs	r1, #55	; 0x37
 8000c66:	50d1      	str	r1, [r2, r3]
						conta++;
 8000c68:	0002      	movs	r2, r0
 8000c6a:	18bb      	adds	r3, r7, r2
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	18ba      	adds	r2, r7, r2
 8000c72:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8000c74:	23fa      	movs	r3, #250	; 0xfa
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 f949 	bl	8001f10 <HAL_Delay>
 8000c7e:	f000 fe37 	bl	80018f0 <main+0x1104>
				}

	          } else if (i == 3) {
 8000c82:	2388      	movs	r3, #136	; 0x88
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d001      	beq.n	8000c90 <main+0x4a4>
 8000c8c:	f000 fe30 	bl	80018f0 <main+0x1104>
	            pressionado = '*';
 8000c90:	231b      	movs	r3, #27
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	222a      	movs	r2, #42	; 0x2a
 8000c96:	701a      	strb	r2, [r3, #0]

	            if(valida_senha(vetorSenhas,conta)==1){
 8000c98:	2494      	movs	r4, #148	; 0x94
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fd2f 	bl	8000708 <valida_senha>
 8000caa:	0003      	movs	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d000      	beq.n	8000cb2 <main+0x4c6>
 8000cb0:	e09a      	b.n	8000de8 <main+0x5fc>
						if(conta-1 == -1){//caso senha nula
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d13b      	bne.n	8000d32 <main+0x546>

			            	// ERRO

			            digitArr[0] = 0x79;
 8000cba:	003b      	movs	r3, r7
 8000cbc:	2279      	movs	r2, #121	; 0x79
 8000cbe:	701a      	strb	r2, [r3, #0]
			            digitArr[1] = 0x50;
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	2250      	movs	r2, #80	; 0x50
 8000cc4:	705a      	strb	r2, [r3, #1]
			            digitArr[2] = 0x50;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2250      	movs	r2, #80	; 0x50
 8000cca:	709a      	strb	r2, [r3, #2]
			            digitArr[3] = 0x5c;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	225c      	movs	r2, #92	; 0x5c
 8000cd0:	70da      	strb	r2, [r3, #3]


			            TM1637_Start();
 8000cd2:	f7ff fc38 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0x40);
 8000cd6:	2040      	movs	r0, #64	; 0x40
 8000cd8:	f7ff fc6a 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000cdc:	f7ff fc57 	bl	800058e <TM1637_ReadResult>
			            TM1637_Stop();
 8000ce0:	f7ff fc3f 	bl	8000562 <TM1637_Stop>

			            TM1637_Start();
 8000ce4:	f7ff fc2f 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0xc0);
 8000ce8:	20c0      	movs	r0, #192	; 0xc0
 8000cea:	f7ff fc61 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000cee:	f7ff fc4e 	bl	800058e <TM1637_ReadResult>

			            for (int i = 0; i < 4; ++i) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cf6:	e00b      	b.n	8000d10 <main+0x524>
			                TM1637_WriteByte(digitArr[i]);
 8000cf8:	003a      	movs	r2, r7
 8000cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fc55 	bl	80005b0 <TM1637_WriteByte>
			                TM1637_ReadResult();
 8000d06:	f7ff fc42 	bl	800058e <TM1637_ReadResult>
			            for (int i = 0; i < 4; ++i) {
 8000d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	ddf0      	ble.n	8000cf8 <main+0x50c>
			            }

			            TM1637_Stop();
 8000d16:	f7ff fc24 	bl	8000562 <TM1637_Stop>
							HAL_UART_Transmit(&huart1, Erro, sizeof(Erro)-1, 100);
 8000d1a:	49e8      	ldr	r1, [pc, #928]	; (80010bc <main+0x8d0>)
 8000d1c:	48e8      	ldr	r0, [pc, #928]	; (80010c0 <main+0x8d4>)
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2205      	movs	r2, #5
 8000d22:	f002 fefd 	bl	8003b20 <HAL_UART_Transmit>
							HAL_Delay(2000);
 8000d26:	23fa      	movs	r3, #250	; 0xfa
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 f8f0 	bl	8001f10 <HAL_Delay>
 8000d30:	e04f      	b.n	8000dd2 <main+0x5e6>

						else{//senhas válidas

								// OPEN

							digitArr[0] = 0x5c;
 8000d32:	003b      	movs	r3, r7
 8000d34:	225c      	movs	r2, #92	; 0x5c
 8000d36:	701a      	strb	r2, [r3, #0]
							digitArr[1] = 0x73;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2273      	movs	r2, #115	; 0x73
 8000d3c:	705a      	strb	r2, [r3, #1]
							digitArr[2] = 0x79;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2279      	movs	r2, #121	; 0x79
 8000d42:	709a      	strb	r2, [r3, #2]
							digitArr[3] = 0x54;
 8000d44:	003b      	movs	r3, r7
 8000d46:	2254      	movs	r2, #84	; 0x54
 8000d48:	70da      	strb	r2, [r3, #3]


							TM1637_Start();
 8000d4a:	f7ff fbfc 	bl	8000546 <TM1637_Start>
							TM1637_WriteByte(0x40);
 8000d4e:	2040      	movs	r0, #64	; 0x40
 8000d50:	f7ff fc2e 	bl	80005b0 <TM1637_WriteByte>
							TM1637_ReadResult();
 8000d54:	f7ff fc1b 	bl	800058e <TM1637_ReadResult>
							TM1637_Stop();
 8000d58:	f7ff fc03 	bl	8000562 <TM1637_Stop>

							TM1637_Start();
 8000d5c:	f7ff fbf3 	bl	8000546 <TM1637_Start>
							TM1637_WriteByte(0xc0);
 8000d60:	20c0      	movs	r0, #192	; 0xc0
 8000d62:	f7ff fc25 	bl	80005b0 <TM1637_WriteByte>
							TM1637_ReadResult();
 8000d66:	f7ff fc12 	bl	800058e <TM1637_ReadResult>

							for (int i = 0; i < 4; ++i) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	677b      	str	r3, [r7, #116]	; 0x74
 8000d6e:	e00b      	b.n	8000d88 <main+0x59c>
								TM1637_WriteByte(digitArr[i]);
 8000d70:	003a      	movs	r2, r7
 8000d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fc19 	bl	80005b0 <TM1637_WriteByte>
								TM1637_ReadResult();
 8000d7e:	f7ff fc06 	bl	800058e <TM1637_ReadResult>
							for (int i = 0; i < 4; ++i) {
 8000d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d84:	3301      	adds	r3, #1
 8000d86:	677b      	str	r3, [r7, #116]	; 0x74
 8000d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	ddf0      	ble.n	8000d70 <main+0x584>
							}

							TM1637_Stop();
 8000d8e:	f7ff fbe8 	bl	8000562 <TM1637_Stop>
							HAL_UART_Transmit(&huart1, Loginfeito, sizeof(Loginfeito)-1, 100);
 8000d92:	49cc      	ldr	r1, [pc, #816]	; (80010c4 <main+0x8d8>)
 8000d94:	48ca      	ldr	r0, [pc, #808]	; (80010c0 <main+0x8d4>)
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	220d      	movs	r2, #13
 8000d9a:	f002 fec1 	bl	8003b20 <HAL_UART_Transmit>


							for(int k=0;k<conta;k++){
 8000d9e:	2300      	movs	r3, #0
 8000da0:	673b      	str	r3, [r7, #112]	; 0x70
 8000da2:	e010      	b.n	8000dc6 <main+0x5da>
								myData=vetorSenhas[k];
 8000da4:	2308      	movs	r3, #8
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	58d3      	ldr	r3, [r2, r3]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, &myData, 1, 100);
 8000db4:	1df9      	adds	r1, r7, #7
 8000db6:	48c2      	ldr	r0, [pc, #776]	; (80010c0 <main+0x8d4>)
 8000db8:	2364      	movs	r3, #100	; 0x64
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f002 feb0 	bl	8003b20 <HAL_UART_Transmit>
							for(int k=0;k<conta;k++){
 8000dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	673b      	str	r3, [r7, #112]	; 0x70
 8000dc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000dc8:	2394      	movs	r3, #148	; 0x94
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbe8      	blt.n	8000da4 <main+0x5b8>
							}



						}
						  HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 8000dd2:	49bd      	ldr	r1, [pc, #756]	; (80010c8 <main+0x8dc>)
 8000dd4:	48ba      	ldr	r0, [pc, #744]	; (80010c0 <main+0x8d4>)
 8000dd6:	2364      	movs	r3, #100	; 0x64
 8000dd8:	2203      	movs	r2, #3
 8000dda:	f002 fea1 	bl	8003b20 <HAL_UART_Transmit>
							HAL_Delay(2000);
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 f894 	bl	8001f10 <HAL_Delay>

	            }
	            if(valida_senha(vetorSenhas,conta)==0){
 8000de8:	2494      	movs	r4, #148	; 0x94
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	2308      	movs	r3, #8
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fc87 	bl	8000708 <valida_senha>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d000      	beq.n	8000e00 <main+0x614>
 8000dfe:	e09a      	b.n	8000f36 <main+0x74a>
		            	if(conta-1 == -1){//caso senha nula
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d13b      	bne.n	8000e80 <main+0x694>

			            	// ERRO

			            digitArr[0] = 0x79;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2279      	movs	r2, #121	; 0x79
 8000e0c:	701a      	strb	r2, [r3, #0]
			            digitArr[1] = 0x50;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2250      	movs	r2, #80	; 0x50
 8000e12:	705a      	strb	r2, [r3, #1]
			            digitArr[2] = 0x50;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2250      	movs	r2, #80	; 0x50
 8000e18:	709a      	strb	r2, [r3, #2]
			            digitArr[3] = 0x5c;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	225c      	movs	r2, #92	; 0x5c
 8000e1e:	70da      	strb	r2, [r3, #3]


			            TM1637_Start();
 8000e20:	f7ff fb91 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0x40);
 8000e24:	2040      	movs	r0, #64	; 0x40
 8000e26:	f7ff fbc3 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000e2a:	f7ff fbb0 	bl	800058e <TM1637_ReadResult>
			            TM1637_Stop();
 8000e2e:	f7ff fb98 	bl	8000562 <TM1637_Stop>

			            TM1637_Start();
 8000e32:	f7ff fb88 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0xc0);
 8000e36:	20c0      	movs	r0, #192	; 0xc0
 8000e38:	f7ff fbba 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000e3c:	f7ff fba7 	bl	800058e <TM1637_ReadResult>

			            for (int i = 0; i < 4; ++i) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e44:	e00b      	b.n	8000e5e <main+0x672>
			                TM1637_WriteByte(digitArr[i]);
 8000e46:	003a      	movs	r2, r7
 8000e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fbae 	bl	80005b0 <TM1637_WriteByte>
			                TM1637_ReadResult();
 8000e54:	f7ff fb9b 	bl	800058e <TM1637_ReadResult>
			            for (int i = 0; i < 4; ++i) {
 8000e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	ddf0      	ble.n	8000e46 <main+0x65a>
			            }

			            TM1637_Stop();
 8000e64:	f7ff fb7d 	bl	8000562 <TM1637_Stop>
		            		HAL_UART_Transmit(&huart1, Erro, sizeof(Erro)-1, 100);
 8000e68:	4994      	ldr	r1, [pc, #592]	; (80010bc <main+0x8d0>)
 8000e6a:	4895      	ldr	r0, [pc, #596]	; (80010c0 <main+0x8d4>)
 8000e6c:	2364      	movs	r3, #100	; 0x64
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f002 fe56 	bl	8003b20 <HAL_UART_Transmit>
							HAL_Delay(2000);
 8000e74:	23fa      	movs	r3, #250	; 0xfa
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 f849 	bl	8001f10 <HAL_Delay>
 8000e7e:	e054      	b.n	8000f2a <main+0x73e>
		            	}
		            	else{//senhas válidas

			            	// ERRO

			            digitArr[0] = 0x79;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2279      	movs	r2, #121	; 0x79
 8000e84:	701a      	strb	r2, [r3, #0]
			            digitArr[1] = 0x50;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2250      	movs	r2, #80	; 0x50
 8000e8a:	705a      	strb	r2, [r3, #1]
			            digitArr[2] = 0x50;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2250      	movs	r2, #80	; 0x50
 8000e90:	709a      	strb	r2, [r3, #2]
			            digitArr[3] = 0x5c;
 8000e92:	003b      	movs	r3, r7
 8000e94:	225c      	movs	r2, #92	; 0x5c
 8000e96:	70da      	strb	r2, [r3, #3]


			            TM1637_Start();
 8000e98:	f7ff fb55 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0x40);
 8000e9c:	2040      	movs	r0, #64	; 0x40
 8000e9e:	f7ff fb87 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000ea2:	f7ff fb74 	bl	800058e <TM1637_ReadResult>
			            TM1637_Stop();
 8000ea6:	f7ff fb5c 	bl	8000562 <TM1637_Stop>

			            TM1637_Start();
 8000eaa:	f7ff fb4c 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0xc0);
 8000eae:	20c0      	movs	r0, #192	; 0xc0
 8000eb0:	f7ff fb7e 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 8000eb4:	f7ff fb6b 	bl	800058e <TM1637_ReadResult>

			            for (int i = 0; i < 4; ++i) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ebc:	e00b      	b.n	8000ed6 <main+0x6ea>
			                TM1637_WriteByte(digitArr[i]);
 8000ebe:	003a      	movs	r2, r7
 8000ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ec2:	18d3      	adds	r3, r2, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fb72 	bl	80005b0 <TM1637_WriteByte>
			                TM1637_ReadResult();
 8000ecc:	f7ff fb5f 	bl	800058e <TM1637_ReadResult>
			            for (int i = 0; i < 4; ++i) {
 8000ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	ddf0      	ble.n	8000ebe <main+0x6d2>
			            }

			            TM1637_Stop();
 8000edc:	f7ff fb41 	bl	8000562 <TM1637_Stop>

							  HAL_UART_Transmit(&huart1, Loginerro, sizeof(Loginerro)-1, 100);
 8000ee0:	497a      	ldr	r1, [pc, #488]	; (80010cc <main+0x8e0>)
 8000ee2:	4877      	ldr	r0, [pc, #476]	; (80010c0 <main+0x8d4>)
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2211      	movs	r2, #17
 8000ee8:	f002 fe1a 	bl	8003b20 <HAL_UART_Transmit>


		            		for(int k=0;k<conta;k++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	667b      	str	r3, [r7, #100]	; 0x64
 8000ef0:	e010      	b.n	8000f14 <main+0x728>
		            			myData=vetorSenhas[k];
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	18fb      	adds	r3, r7, r3
 8000ef6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	58d3      	ldr	r3, [r2, r3]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
		            			HAL_UART_Transmit(&huart1, &myData, 1, 100);
 8000f02:	1df9      	adds	r1, r7, #7
 8000f04:	486e      	ldr	r0, [pc, #440]	; (80010c0 <main+0x8d4>)
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f002 fe09 	bl	8003b20 <HAL_UART_Transmit>
		            		for(int k=0;k<conta;k++){
 8000f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f10:	3301      	adds	r3, #1
 8000f12:	667b      	str	r3, [r7, #100]	; 0x64
 8000f14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f16:	2394      	movs	r3, #148	; 0x94
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbe8      	blt.n	8000ef2 <main+0x706>
		            		}
							HAL_Delay(2000);
 8000f20:	23fa      	movs	r3, #250	; 0xfa
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 fff3 	bl	8001f10 <HAL_Delay>
		            	}
						HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 8000f2a:	4967      	ldr	r1, [pc, #412]	; (80010c8 <main+0x8dc>)
 8000f2c:	4864      	ldr	r0, [pc, #400]	; (80010c0 <main+0x8d4>)
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	2203      	movs	r2, #3
 8000f32:	f002 fdf5 	bl	8003b20 <HAL_UART_Transmit>



	            }

	            senha = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	229c      	movs	r2, #156	; 0x9c
 8000f3a:	18ba      	adds	r2, r7, r2
 8000f3c:	6013      	str	r3, [r2, #0]
	            for (int i = 0; i < 4; ++i) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	663b      	str	r3, [r7, #96]	; 0x60
 8000f42:	e007      	b.n	8000f54 <main+0x768>
	                digitArr[i] = 0x08;
 8000f44:	003a      	movs	r2, r7
 8000f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	701a      	strb	r2, [r3, #0]
	            for (int i = 0; i < 4; ++i) {
 8000f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f50:	3301      	adds	r3, #1
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60
 8000f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	ddf4      	ble.n	8000f44 <main+0x758>
	            }

	            TM1637_Start();
 8000f5a:	f7ff faf4 	bl	8000546 <TM1637_Start>
	            TM1637_WriteByte(0x40);
 8000f5e:	2040      	movs	r0, #64	; 0x40
 8000f60:	f7ff fb26 	bl	80005b0 <TM1637_WriteByte>
	            TM1637_ReadResult();
 8000f64:	f7ff fb13 	bl	800058e <TM1637_ReadResult>
	            TM1637_Stop();
 8000f68:	f7ff fafb 	bl	8000562 <TM1637_Stop>

	            TM1637_Start();
 8000f6c:	f7ff faeb 	bl	8000546 <TM1637_Start>
	            TM1637_WriteByte(0xc0);
 8000f70:	20c0      	movs	r0, #192	; 0xc0
 8000f72:	f7ff fb1d 	bl	80005b0 <TM1637_WriteByte>
	            TM1637_ReadResult();
 8000f76:	f7ff fb0a 	bl	800058e <TM1637_ReadResult>

	            for (int i = 0; i < 4; ++i) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f7e:	e00c      	b.n	8000f9a <main+0x7ae>
	                TM1637_WriteByte(digitArr[3 - i]);
 8000f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f82:	2203      	movs	r2, #3
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	003a      	movs	r2, r7
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fb10 	bl	80005b0 <TM1637_WriteByte>
	                TM1637_ReadResult();
 8000f90:	f7ff fafd 	bl	800058e <TM1637_ReadResult>
	            for (int i = 0; i < 4; ++i) {
 8000f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f96:	3301      	adds	r3, #1
 8000f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	ddef      	ble.n	8000f80 <main+0x794>
	            }

	            TM1637_Stop();
 8000fa0:	f7ff fadf 	bl	8000562 <TM1637_Stop>
	            conta = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	2294      	movs	r2, #148	; 0x94
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	6013      	str	r3, [r2, #0]

	            HAL_Delay(200);
 8000fac:	20c8      	movs	r0, #200	; 0xc8
 8000fae:	f000 ffaf 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fab0 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 8000fb8:	20c8      	movs	r0, #200	; 0xc8
 8000fba:	f000 ffa9 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 8000fbe:	2007      	movs	r0, #7
 8000fc0:	f7ff faaa 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 8000fc4:	20c8      	movs	r0, #200	; 0xc8
 8000fc6:	f000 ffa3 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff faa4 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 8000fd0:	20c8      	movs	r0, #200	; 0xc8
 8000fd2:	f000 ff9d 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f7ff fa9e 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 8000fdc:	20c8      	movs	r0, #200	; 0xc8
 8000fde:	f000 ff97 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fa98 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 8000fe8:	20c8      	movs	r0, #200	; 0xc8
 8000fea:	f000 ff91 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f7ff fa92 	bl	8000518 <TM1637_SetBrightness>
 8000ff4:	f000 fc7c 	bl	80018f0 <main+0x1104>
	          }
	        }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0) {
 8000ff8:	2390      	movs	r3, #144	; 0x90
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 f9ce 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d000      	beq.n	800100a <main+0x81e>
 8001008:	e169      	b.n	80012de <main+0xaf2>
	          if (i == 0) {
 800100a:	2388      	movs	r3, #136	; 0x88
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d15d      	bne.n	80010d0 <main+0x8e4>
	            pressionado = '2';
 8001014:	231b      	movs	r3, #27
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 800101c:	2194      	movs	r1, #148	; 0x94
 800101e:	187b      	adds	r3, r7, r1
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b03      	cmp	r3, #3
 8001024:	dd01      	ble.n	800102a <main+0x83e>
 8001026:	f000 fc63 	bl	80018f0 <main+0x1104>
					  digitArr[conta] = 0x5b;
 800102a:	003a      	movs	r2, r7
 800102c:	187b      	adds	r3, r7, r1
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	225b      	movs	r2, #91	; 0x5b
 8001034:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 8001036:	f7ff fa86 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 800103a:	2040      	movs	r0, #64	; 0x40
 800103c:	f7ff fab8 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001040:	f7ff faa5 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 8001044:	f7ff fa8d 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 8001048:	f7ff fa7d 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 800104c:	20c0      	movs	r0, #192	; 0xc0
 800104e:	f7ff faaf 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001052:	f7ff fa9c 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 8001056:	2300      	movs	r3, #0
 8001058:	65bb      	str	r3, [r7, #88]	; 0x58
 800105a:	e00b      	b.n	8001074 <main+0x888>
						  TM1637_WriteByte(digitArr[i]);
 800105c:	003a      	movs	r2, r7
 800105e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001060:	18d3      	adds	r3, r2, r3
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff faa3 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 800106a:	f7ff fa90 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 800106e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001070:	3301      	adds	r3, #1
 8001072:	65bb      	str	r3, [r7, #88]	; 0x58
 8001074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001076:	2b03      	cmp	r3, #3
 8001078:	ddf0      	ble.n	800105c <main+0x870>
					  }

					  TM1637_Stop();
 800107a:	f7ff fa72 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+2;
 800107e:	219c      	movs	r1, #156	; 0x9c
 8001080:	187b      	adds	r3, r7, r1
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	0013      	movs	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	189b      	adds	r3, r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	3302      	adds	r3, #2
 800108e:	187a      	adds	r2, r7, r1
 8001090:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 50;
 8001092:	2308      	movs	r3, #8
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2094      	movs	r0, #148	; 0x94
 8001098:	183a      	adds	r2, r7, r0
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	2132      	movs	r1, #50	; 0x32
 80010a0:	50d1      	str	r1, [r2, r3]
						conta++;
 80010a2:	0002      	movs	r2, r0
 80010a4:	18bb      	adds	r3, r7, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	18ba      	adds	r2, r7, r2
 80010ac:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 80010ae:	23fa      	movs	r3, #250	; 0xfa
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 ff2c 	bl	8001f10 <HAL_Delay>
 80010b8:	f000 fc1a 	bl	80018f0 <main+0x1104>
 80010bc:	200000a8 	.word	0x200000a8
 80010c0:	20000128 	.word	0x20000128
 80010c4:	2000004c 	.word	0x2000004c
 80010c8:	200000b0 	.word	0x200000b0
 80010cc:	2000005c 	.word	0x2000005c
				}

	          } else if (i == 1) {
 80010d0:	2388      	movs	r3, #136	; 0x88
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d153      	bne.n	8001182 <main+0x996>
	            pressionado = '5';
 80010da:	231b      	movs	r3, #27
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2235      	movs	r2, #53	; 0x35
 80010e0:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 80010e2:	2194      	movs	r1, #148	; 0x94
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	dd01      	ble.n	80010f0 <main+0x904>
 80010ec:	f000 fc00 	bl	80018f0 <main+0x1104>
					  digitArr[conta] = 0x6d;
 80010f0:	003a      	movs	r2, r7
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	18d3      	adds	r3, r2, r3
 80010f8:	226d      	movs	r2, #109	; 0x6d
 80010fa:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 80010fc:	f7ff fa23 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 8001100:	2040      	movs	r0, #64	; 0x40
 8001102:	f7ff fa55 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001106:	f7ff fa42 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 800110a:	f7ff fa2a 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 800110e:	f7ff fa1a 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 8001112:	20c0      	movs	r0, #192	; 0xc0
 8001114:	f7ff fa4c 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001118:	f7ff fa39 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 800111c:	2300      	movs	r3, #0
 800111e:	657b      	str	r3, [r7, #84]	; 0x54
 8001120:	e00b      	b.n	800113a <main+0x94e>
						  TM1637_WriteByte(digitArr[i]);
 8001122:	003a      	movs	r2, r7
 8001124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff fa40 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 8001130:	f7ff fa2d 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 8001134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001136:	3301      	adds	r3, #1
 8001138:	657b      	str	r3, [r7, #84]	; 0x54
 800113a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800113c:	2b03      	cmp	r3, #3
 800113e:	ddf0      	ble.n	8001122 <main+0x936>
					  }

					  TM1637_Stop();
 8001140:	f7ff fa0f 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+5;
 8001144:	219c      	movs	r1, #156	; 0x9c
 8001146:	187b      	adds	r3, r7, r1
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	0013      	movs	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	189b      	adds	r3, r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	3305      	adds	r3, #5
 8001154:	187a      	adds	r2, r7, r1
 8001156:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 53;
 8001158:	2308      	movs	r3, #8
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2094      	movs	r0, #148	; 0x94
 800115e:	183a      	adds	r2, r7, r0
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	2135      	movs	r1, #53	; 0x35
 8001166:	50d1      	str	r1, [r2, r3]
						conta++;
 8001168:	0002      	movs	r2, r0
 800116a:	18bb      	adds	r3, r7, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3301      	adds	r3, #1
 8001170:	18ba      	adds	r2, r7, r2
 8001172:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8001174:	23fa      	movs	r3, #250	; 0xfa
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fec9 	bl	8001f10 <HAL_Delay>
 800117e:	f000 fbb7 	bl	80018f0 <main+0x1104>
				}

	          } else if (i == 2) {
 8001182:	2388      	movs	r3, #136	; 0x88
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d151      	bne.n	8001230 <main+0xa44>
	            pressionado = '8';
 800118c:	231b      	movs	r3, #27
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2238      	movs	r2, #56	; 0x38
 8001192:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8001194:	2194      	movs	r1, #148	; 0x94
 8001196:	187b      	adds	r3, r7, r1
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b03      	cmp	r3, #3
 800119c:	dd00      	ble.n	80011a0 <main+0x9b4>
 800119e:	e3a7      	b.n	80018f0 <main+0x1104>
					  digitArr[conta] = 0x7f;
 80011a0:	003a      	movs	r2, r7
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	227f      	movs	r2, #127	; 0x7f
 80011aa:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 80011ac:	f7ff f9cb 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 80011b0:	2040      	movs	r0, #64	; 0x40
 80011b2:	f7ff f9fd 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 80011b6:	f7ff f9ea 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 80011ba:	f7ff f9d2 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 80011be:	f7ff f9c2 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 80011c2:	20c0      	movs	r0, #192	; 0xc0
 80011c4:	f7ff f9f4 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 80011c8:	f7ff f9e1 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	653b      	str	r3, [r7, #80]	; 0x50
 80011d0:	e00b      	b.n	80011ea <main+0x9fe>
						  TM1637_WriteByte(digitArr[i]);
 80011d2:	003a      	movs	r2, r7
 80011d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d6:	18d3      	adds	r3, r2, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff f9e8 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 80011e0:	f7ff f9d5 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 80011e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e6:	3301      	adds	r3, #1
 80011e8:	653b      	str	r3, [r7, #80]	; 0x50
 80011ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	ddf0      	ble.n	80011d2 <main+0x9e6>
					  }

					  TM1637_Stop();
 80011f0:	f7ff f9b7 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+8;
 80011f4:	219c      	movs	r1, #156	; 0x9c
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	0013      	movs	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3308      	adds	r3, #8
 8001204:	187a      	adds	r2, r7, r1
 8001206:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 56;
 8001208:	2308      	movs	r3, #8
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2094      	movs	r0, #148	; 0x94
 800120e:	183a      	adds	r2, r7, r0
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	2138      	movs	r1, #56	; 0x38
 8001216:	50d1      	str	r1, [r2, r3]
						conta++;
 8001218:	0002      	movs	r2, r0
 800121a:	18bb      	adds	r3, r7, r2
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	18ba      	adds	r2, r7, r2
 8001222:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8001224:	23fa      	movs	r3, #250	; 0xfa
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fe71 	bl	8001f10 <HAL_Delay>
 800122e:	e35f      	b.n	80018f0 <main+0x1104>
				}

	          } else if (i == 3) {
 8001230:	2388      	movs	r3, #136	; 0x88
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d000      	beq.n	800123c <main+0xa50>
 800123a:	e359      	b.n	80018f0 <main+0x1104>
	            pressionado = '0';
 800123c:	231b      	movs	r3, #27
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2230      	movs	r2, #48	; 0x30
 8001242:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8001244:	2194      	movs	r1, #148	; 0x94
 8001246:	187b      	adds	r3, r7, r1
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b03      	cmp	r3, #3
 800124c:	dd00      	ble.n	8001250 <main+0xa64>
 800124e:	e34f      	b.n	80018f0 <main+0x1104>
					  digitArr[conta] = 0x3f;
 8001250:	003a      	movs	r2, r7
 8001252:	187b      	adds	r3, r7, r1
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	223f      	movs	r2, #63	; 0x3f
 800125a:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 800125c:	f7ff f973 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 8001260:	2040      	movs	r0, #64	; 0x40
 8001262:	f7ff f9a5 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001266:	f7ff f992 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 800126a:	f7ff f97a 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 800126e:	f7ff f96a 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 8001272:	20c0      	movs	r0, #192	; 0xc0
 8001274:	f7ff f99c 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001278:	f7ff f989 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 800127c:	2300      	movs	r3, #0
 800127e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001280:	e00b      	b.n	800129a <main+0xaae>
						  TM1637_WriteByte(digitArr[i]);
 8001282:	003a      	movs	r2, r7
 8001284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001286:	18d3      	adds	r3, r2, r3
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff f990 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 8001290:	f7ff f97d 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 8001294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001296:	3301      	adds	r3, #1
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	2b03      	cmp	r3, #3
 800129e:	ddf0      	ble.n	8001282 <main+0xa96>
					  }

					  TM1637_Stop();
 80012a0:	f7ff f95f 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+0;
 80012a4:	219c      	movs	r1, #156	; 0x9c
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	0013      	movs	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	187a      	adds	r2, r7, r1
 80012b4:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 48;
 80012b6:	2308      	movs	r3, #8
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2094      	movs	r0, #148	; 0x94
 80012bc:	183a      	adds	r2, r7, r0
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	2130      	movs	r1, #48	; 0x30
 80012c4:	50d1      	str	r1, [r2, r3]
						conta++;
 80012c6:	0002      	movs	r2, r0
 80012c8:	18bb      	adds	r3, r7, r2
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	18ba      	adds	r2, r7, r2
 80012d0:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 80012d2:	23fa      	movs	r3, #250	; 0xfa
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fe1a 	bl	8001f10 <HAL_Delay>
 80012dc:	e308      	b.n	80018f0 <main+0x1104>
				}

	          }
	        }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0) {
 80012de:	2390      	movs	r3, #144	; 0x90
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	0018      	movs	r0, r3
 80012e6:	f001 f85b 	bl	80023a0 <HAL_GPIO_ReadPin>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d000      	beq.n	80012f0 <main+0xb04>
 80012ee:	e2ff      	b.n	80018f0 <main+0x1104>
	          if (i == 0) {
 80012f0:	2388      	movs	r3, #136	; 0x88
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d151      	bne.n	800139e <main+0xbb2>
	            pressionado = '3';
 80012fa:	231b      	movs	r3, #27
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2233      	movs	r2, #51	; 0x33
 8001300:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 8001302:	2194      	movs	r1, #148	; 0x94
 8001304:	187b      	adds	r3, r7, r1
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	dd00      	ble.n	800130e <main+0xb22>
 800130c:	e2f0      	b.n	80018f0 <main+0x1104>
					  digitArr[conta] = 0x4f;
 800130e:	003a      	movs	r2, r7
 8001310:	187b      	adds	r3, r7, r1
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	224f      	movs	r2, #79	; 0x4f
 8001318:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 800131a:	f7ff f914 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 800131e:	2040      	movs	r0, #64	; 0x40
 8001320:	f7ff f946 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001324:	f7ff f933 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 8001328:	f7ff f91b 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 800132c:	f7ff f90b 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 8001330:	20c0      	movs	r0, #192	; 0xc0
 8001332:	f7ff f93d 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001336:	f7ff f92a 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 800133a:	2300      	movs	r3, #0
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
 800133e:	e00b      	b.n	8001358 <main+0xb6c>
						  TM1637_WriteByte(digitArr[i]);
 8001340:	003a      	movs	r2, r7
 8001342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff f931 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 800134e:	f7ff f91e 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	3301      	adds	r3, #1
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
 8001358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135a:	2b03      	cmp	r3, #3
 800135c:	ddf0      	ble.n	8001340 <main+0xb54>
					  }

					  TM1637_Stop();
 800135e:	f7ff f900 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+3;
 8001362:	219c      	movs	r1, #156	; 0x9c
 8001364:	187b      	adds	r3, r7, r1
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	0013      	movs	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	189b      	adds	r3, r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3303      	adds	r3, #3
 8001372:	187a      	adds	r2, r7, r1
 8001374:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 51;
 8001376:	2308      	movs	r3, #8
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2094      	movs	r0, #148	; 0x94
 800137c:	183a      	adds	r2, r7, r0
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	2133      	movs	r1, #51	; 0x33
 8001384:	50d1      	str	r1, [r2, r3]
						conta++;
 8001386:	0002      	movs	r2, r0
 8001388:	18bb      	adds	r3, r7, r2
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	18ba      	adds	r2, r7, r2
 8001390:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8001392:	23fa      	movs	r3, #250	; 0xfa
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fdba 	bl	8001f10 <HAL_Delay>
 800139c:	e2a8      	b.n	80018f0 <main+0x1104>
				}

	          } else if (i == 1) {
 800139e:	2388      	movs	r3, #136	; 0x88
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d151      	bne.n	800144c <main+0xc60>
	            pressionado = '6';
 80013a8:	231b      	movs	r3, #27
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2236      	movs	r2, #54	; 0x36
 80013ae:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 80013b0:	2194      	movs	r1, #148	; 0x94
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	dd00      	ble.n	80013bc <main+0xbd0>
 80013ba:	e299      	b.n	80018f0 <main+0x1104>
					  digitArr[conta] = 0x7d;
 80013bc:	003a      	movs	r2, r7
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	227d      	movs	r2, #125	; 0x7d
 80013c6:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 80013c8:	f7ff f8bd 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 80013cc:	2040      	movs	r0, #64	; 0x40
 80013ce:	f7ff f8ef 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 80013d2:	f7ff f8dc 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 80013d6:	f7ff f8c4 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 80013da:	f7ff f8b4 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 80013de:	20c0      	movs	r0, #192	; 0xc0
 80013e0:	f7ff f8e6 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 80013e4:	f7ff f8d3 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
 80013ec:	e00b      	b.n	8001406 <main+0xc1a>
						  TM1637_WriteByte(digitArr[i]);
 80013ee:	003a      	movs	r2, r7
 80013f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff f8da 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 80013fc:	f7ff f8c7 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 8001400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001402:	3301      	adds	r3, #1
 8001404:	647b      	str	r3, [r7, #68]	; 0x44
 8001406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001408:	2b03      	cmp	r3, #3
 800140a:	ddf0      	ble.n	80013ee <main+0xc02>
					  }

					  TM1637_Stop();
 800140c:	f7ff f8a9 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+6;
 8001410:	219c      	movs	r1, #156	; 0x9c
 8001412:	187b      	adds	r3, r7, r1
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	0013      	movs	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	189b      	adds	r3, r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	3306      	adds	r3, #6
 8001420:	187a      	adds	r2, r7, r1
 8001422:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 54;
 8001424:	2308      	movs	r3, #8
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2094      	movs	r0, #148	; 0x94
 800142a:	183a      	adds	r2, r7, r0
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	2136      	movs	r1, #54	; 0x36
 8001432:	50d1      	str	r1, [r2, r3]
						conta++;
 8001434:	0002      	movs	r2, r0
 8001436:	18bb      	adds	r3, r7, r2
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	18ba      	adds	r2, r7, r2
 800143e:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 8001440:	23fa      	movs	r3, #250	; 0xfa
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	0018      	movs	r0, r3
 8001446:	f000 fd63 	bl	8001f10 <HAL_Delay>
 800144a:	e251      	b.n	80018f0 <main+0x1104>
				}

	          } else if (i == 2) {
 800144c:	2388      	movs	r3, #136	; 0x88
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d151      	bne.n	80014fa <main+0xd0e>
	            pressionado = '9';
 8001456:	231b      	movs	r3, #27
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	2239      	movs	r2, #57	; 0x39
 800145c:	701a      	strb	r2, [r3, #0]
	            if(conta < 4){
 800145e:	2194      	movs	r1, #148	; 0x94
 8001460:	187b      	adds	r3, r7, r1
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	dd00      	ble.n	800146a <main+0xc7e>
 8001468:	e242      	b.n	80018f0 <main+0x1104>
					  digitArr[conta] = 0x6f;
 800146a:	003a      	movs	r2, r7
 800146c:	187b      	adds	r3, r7, r1
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	226f      	movs	r2, #111	; 0x6f
 8001474:	701a      	strb	r2, [r3, #0]

					  TM1637_Start();
 8001476:	f7ff f866 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0x40);
 800147a:	2040      	movs	r0, #64	; 0x40
 800147c:	f7ff f898 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001480:	f7ff f885 	bl	800058e <TM1637_ReadResult>
					  TM1637_Stop();
 8001484:	f7ff f86d 	bl	8000562 <TM1637_Stop>

					  TM1637_Start();
 8001488:	f7ff f85d 	bl	8000546 <TM1637_Start>
					  TM1637_WriteByte(0xc0);
 800148c:	20c0      	movs	r0, #192	; 0xc0
 800148e:	f7ff f88f 	bl	80005b0 <TM1637_WriteByte>
					  TM1637_ReadResult();
 8001492:	f7ff f87c 	bl	800058e <TM1637_ReadResult>

					  for (int i = 0; i < 4; ++i) {
 8001496:	2300      	movs	r3, #0
 8001498:	643b      	str	r3, [r7, #64]	; 0x40
 800149a:	e00b      	b.n	80014b4 <main+0xcc8>
						  TM1637_WriteByte(digitArr[i]);
 800149c:	003a      	movs	r2, r7
 800149e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a0:	18d3      	adds	r3, r2, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff f883 	bl	80005b0 <TM1637_WriteByte>
						  TM1637_ReadResult();
 80014aa:	f7ff f870 	bl	800058e <TM1637_ReadResult>
					  for (int i = 0; i < 4; ++i) {
 80014ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b0:	3301      	adds	r3, #1
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
 80014b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	ddf0      	ble.n	800149c <main+0xcb0>
					  }

					  TM1637_Stop();
 80014ba:	f7ff f852 	bl	8000562 <TM1637_Stop>

						senha = (senha*10)+9;
 80014be:	219c      	movs	r1, #156	; 0x9c
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	0013      	movs	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	189b      	adds	r3, r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	3309      	adds	r3, #9
 80014ce:	187a      	adds	r2, r7, r1
 80014d0:	6013      	str	r3, [r2, #0]
						vetorSenhas[conta]= 57;
 80014d2:	2308      	movs	r3, #8
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2094      	movs	r0, #148	; 0x94
 80014d8:	183a      	adds	r2, r7, r0
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	2139      	movs	r1, #57	; 0x39
 80014e0:	50d1      	str	r1, [r2, r3]
						conta++;
 80014e2:	0002      	movs	r2, r0
 80014e4:	18bb      	adds	r3, r7, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	18ba      	adds	r2, r7, r2
 80014ec:	6013      	str	r3, [r2, #0]
						HAL_Delay(500);
 80014ee:	23fa      	movs	r3, #250	; 0xfa
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 fd0c 	bl	8001f10 <HAL_Delay>
 80014f8:	e1fa      	b.n	80018f0 <main+0x1104>
				}

	          } else if (i == 3) {
 80014fa:	2388      	movs	r3, #136	; 0x88
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d000      	beq.n	8001506 <main+0xd1a>
 8001504:	e1f4      	b.n	80018f0 <main+0x1104>
	            pressionado = '#';
 8001506:	231b      	movs	r3, #27
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2223      	movs	r2, #35	; 0x23
 800150c:	701a      	strb	r2, [r3, #0]

            	//Quebra de linha

	            if(valida_senha(vetorSenhas,conta)==1){
 800150e:	2494      	movs	r4, #148	; 0x94
 8001510:	193b      	adds	r3, r7, r4
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2308      	movs	r3, #8
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff f8f4 	bl	8000708 <valida_senha>
 8001520:	0003      	movs	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d000      	beq.n	8001528 <main+0xd3c>
 8001526:	e09a      	b.n	800165e <main+0xe72>
						if(conta-1 == -1){//caso senha nula
 8001528:	193b      	adds	r3, r7, r4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13b      	bne.n	80015a8 <main+0xdbc>

								// ERRO

							digitArr[0] = 0x79;
 8001530:	003b      	movs	r3, r7
 8001532:	2279      	movs	r2, #121	; 0x79
 8001534:	701a      	strb	r2, [r3, #0]
							digitArr[1] = 0x50;
 8001536:	003b      	movs	r3, r7
 8001538:	2250      	movs	r2, #80	; 0x50
 800153a:	705a      	strb	r2, [r3, #1]
							digitArr[2] = 0x50;
 800153c:	003b      	movs	r3, r7
 800153e:	2250      	movs	r2, #80	; 0x50
 8001540:	709a      	strb	r2, [r3, #2]
							digitArr[3] = 0x5c;
 8001542:	003b      	movs	r3, r7
 8001544:	225c      	movs	r2, #92	; 0x5c
 8001546:	70da      	strb	r2, [r3, #3]


							TM1637_Start();
 8001548:	f7fe fffd 	bl	8000546 <TM1637_Start>
							TM1637_WriteByte(0x40);
 800154c:	2040      	movs	r0, #64	; 0x40
 800154e:	f7ff f82f 	bl	80005b0 <TM1637_WriteByte>
							TM1637_ReadResult();
 8001552:	f7ff f81c 	bl	800058e <TM1637_ReadResult>
							TM1637_Stop();
 8001556:	f7ff f804 	bl	8000562 <TM1637_Stop>

							TM1637_Start();
 800155a:	f7fe fff4 	bl	8000546 <TM1637_Start>
							TM1637_WriteByte(0xc0);
 800155e:	20c0      	movs	r0, #192	; 0xc0
 8001560:	f7ff f826 	bl	80005b0 <TM1637_WriteByte>
							TM1637_ReadResult();
 8001564:	f7ff f813 	bl	800058e <TM1637_ReadResult>

							for (int i = 0; i < 4; ++i) {
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156c:	e00b      	b.n	8001586 <main+0xd9a>
								TM1637_WriteByte(digitArr[i]);
 800156e:	003a      	movs	r2, r7
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	18d3      	adds	r3, r2, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff f81a 	bl	80005b0 <TM1637_WriteByte>
								TM1637_ReadResult();
 800157c:	f7ff f807 	bl	800058e <TM1637_ReadResult>
							for (int i = 0; i < 4; ++i) {
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	3301      	adds	r3, #1
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001588:	2b03      	cmp	r3, #3
 800158a:	ddf0      	ble.n	800156e <main+0xd82>
							}

							TM1637_Stop();
 800158c:	f7fe ffe9 	bl	8000562 <TM1637_Stop>
							HAL_UART_Transmit(&huart1, Erro, sizeof(Erro)-1, 100);
 8001590:	49df      	ldr	r1, [pc, #892]	; (8001910 <main+0x1124>)
 8001592:	48e0      	ldr	r0, [pc, #896]	; (8001914 <main+0x1128>)
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	2205      	movs	r2, #5
 8001598:	f002 fac2 	bl	8003b20 <HAL_UART_Transmit>
							HAL_Delay(2000);
 800159c:	23fa      	movs	r3, #250	; 0xfa
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 fcb5 	bl	8001f10 <HAL_Delay>
 80015a6:	e054      	b.n	8001652 <main+0xe66>

						else{//senhas válidas

			            	// ERRO

			            digitArr[0] = 0x79;
 80015a8:	003b      	movs	r3, r7
 80015aa:	2279      	movs	r2, #121	; 0x79
 80015ac:	701a      	strb	r2, [r3, #0]
			            digitArr[1] = 0x50;
 80015ae:	003b      	movs	r3, r7
 80015b0:	2250      	movs	r2, #80	; 0x50
 80015b2:	705a      	strb	r2, [r3, #1]
			            digitArr[2] = 0x50;
 80015b4:	003b      	movs	r3, r7
 80015b6:	2250      	movs	r2, #80	; 0x50
 80015b8:	709a      	strb	r2, [r3, #2]
			            digitArr[3] = 0x5c;
 80015ba:	003b      	movs	r3, r7
 80015bc:	225c      	movs	r2, #92	; 0x5c
 80015be:	70da      	strb	r2, [r3, #3]


			            TM1637_Start();
 80015c0:	f7fe ffc1 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0x40);
 80015c4:	2040      	movs	r0, #64	; 0x40
 80015c6:	f7fe fff3 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 80015ca:	f7fe ffe0 	bl	800058e <TM1637_ReadResult>
			            TM1637_Stop();
 80015ce:	f7fe ffc8 	bl	8000562 <TM1637_Stop>

			            TM1637_Start();
 80015d2:	f7fe ffb8 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0xc0);
 80015d6:	20c0      	movs	r0, #192	; 0xc0
 80015d8:	f7fe ffea 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 80015dc:	f7fe ffd7 	bl	800058e <TM1637_ReadResult>

			            for (int i = 0; i < 4; ++i) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e4:	e00b      	b.n	80015fe <main+0xe12>
			                TM1637_WriteByte(digitArr[i]);
 80015e6:	003a      	movs	r2, r7
 80015e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ea:	18d3      	adds	r3, r2, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7fe ffde 	bl	80005b0 <TM1637_WriteByte>
			                TM1637_ReadResult();
 80015f4:	f7fe ffcb 	bl	800058e <TM1637_ReadResult>
			            for (int i = 0; i < 4; ++i) {
 80015f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fa:	3301      	adds	r3, #1
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	2b03      	cmp	r3, #3
 8001602:	ddf0      	ble.n	80015e6 <main+0xdfa>
			            }

			            TM1637_Stop();
 8001604:	f7fe ffad 	bl	8000562 <TM1637_Stop>

							HAL_UART_Transmit(&huart1, Senharepetida, sizeof(Senharepetida)-1, 100);
 8001608:	49c3      	ldr	r1, [pc, #780]	; (8001918 <main+0x112c>)
 800160a:	48c2      	ldr	r0, [pc, #776]	; (8001914 <main+0x1128>)
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	221a      	movs	r2, #26
 8001610:	f002 fa86 	bl	8003b20 <HAL_UART_Transmit>


							for(int k=0;k<conta;k++){
 8001614:	2300      	movs	r3, #0
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
 8001618:	e010      	b.n	800163c <main+0xe50>
								myData=vetorSenhas[k];
 800161a:	2308      	movs	r3, #8
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	58d3      	ldr	r3, [r2, r3]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	701a      	strb	r2, [r3, #0]
								HAL_UART_Transmit(&huart1, &myData, 1, 100);
 800162a:	1df9      	adds	r1, r7, #7
 800162c:	48b9      	ldr	r0, [pc, #740]	; (8001914 <main+0x1128>)
 800162e:	2364      	movs	r3, #100	; 0x64
 8001630:	2201      	movs	r2, #1
 8001632:	f002 fa75 	bl	8003b20 <HAL_UART_Transmit>
							for(int k=0;k<conta;k++){
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	3301      	adds	r3, #1
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
 800163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800163e:	2394      	movs	r3, #148	; 0x94
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbe8      	blt.n	800161a <main+0xe2e>
							}

							HAL_Delay(2000);
 8001648:	23fa      	movs	r3, #250	; 0xfa
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	0018      	movs	r0, r3
 800164e:	f000 fc5f 	bl	8001f10 <HAL_Delay>

						}
						  HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 8001652:	49b2      	ldr	r1, [pc, #712]	; (800191c <main+0x1130>)
 8001654:	48af      	ldr	r0, [pc, #700]	; (8001914 <main+0x1128>)
 8001656:	2364      	movs	r3, #100	; 0x64
 8001658:	2203      	movs	r2, #3
 800165a:	f002 fa61 	bl	8003b20 <HAL_UART_Transmit>
	            }
	            if(valida_senha(vetorSenhas,conta)==0){
 800165e:	2494      	movs	r4, #148	; 0x94
 8001660:	193b      	adds	r3, r7, r4
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2308      	movs	r3, #8
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	0011      	movs	r1, r2
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff f84c 	bl	8000708 <valida_senha>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d000      	beq.n	8001676 <main+0xe8a>
 8001674:	e0dd      	b.n	8001832 <main+0x1046>
		            	if(conta-1 == -1){//caso senha nula
 8001676:	193b      	adds	r3, r7, r4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d13b      	bne.n	80016f6 <main+0xf0a>

			            	// ERRO

			            digitArr[0] = 0x79;
 800167e:	003b      	movs	r3, r7
 8001680:	2279      	movs	r2, #121	; 0x79
 8001682:	701a      	strb	r2, [r3, #0]
			            digitArr[1] = 0x50;
 8001684:	003b      	movs	r3, r7
 8001686:	2250      	movs	r2, #80	; 0x50
 8001688:	705a      	strb	r2, [r3, #1]
			            digitArr[2] = 0x50;
 800168a:	003b      	movs	r3, r7
 800168c:	2250      	movs	r2, #80	; 0x50
 800168e:	709a      	strb	r2, [r3, #2]
			            digitArr[3] = 0x5c;
 8001690:	003b      	movs	r3, r7
 8001692:	225c      	movs	r2, #92	; 0x5c
 8001694:	70da      	strb	r2, [r3, #3]


			            TM1637_Start();
 8001696:	f7fe ff56 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0x40);
 800169a:	2040      	movs	r0, #64	; 0x40
 800169c:	f7fe ff88 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 80016a0:	f7fe ff75 	bl	800058e <TM1637_ReadResult>
			            TM1637_Stop();
 80016a4:	f7fe ff5d 	bl	8000562 <TM1637_Stop>

			            TM1637_Start();
 80016a8:	f7fe ff4d 	bl	8000546 <TM1637_Start>
			            TM1637_WriteByte(0xc0);
 80016ac:	20c0      	movs	r0, #192	; 0xc0
 80016ae:	f7fe ff7f 	bl	80005b0 <TM1637_WriteByte>
			            TM1637_ReadResult();
 80016b2:	f7fe ff6c 	bl	800058e <TM1637_ReadResult>

			            for (int i = 0; i < 4; ++i) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ba:	e00b      	b.n	80016d4 <main+0xee8>
			                TM1637_WriteByte(digitArr[i]);
 80016bc:	003a      	movs	r2, r7
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7fe ff73 	bl	80005b0 <TM1637_WriteByte>
			                TM1637_ReadResult();
 80016ca:	f7fe ff60 	bl	800058e <TM1637_ReadResult>
			            for (int i = 0; i < 4; ++i) {
 80016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d0:	3301      	adds	r3, #1
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	ddf0      	ble.n	80016bc <main+0xed0>
			            }

			            TM1637_Stop();
 80016da:	f7fe ff42 	bl	8000562 <TM1637_Stop>
		            		HAL_UART_Transmit(&huart1, Erro, sizeof(Erro)-1, 100);
 80016de:	498c      	ldr	r1, [pc, #560]	; (8001910 <main+0x1124>)
 80016e0:	488c      	ldr	r0, [pc, #560]	; (8001914 <main+0x1128>)
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	2205      	movs	r2, #5
 80016e6:	f002 fa1b 	bl	8003b20 <HAL_UART_Transmit>
							HAL_Delay(2000);
 80016ea:	23fa      	movs	r3, #250	; 0xfa
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 fc0e 	bl	8001f10 <HAL_Delay>
 80016f4:	e092      	b.n	800181c <main+0x1030>


		            	}
		            	else{//senhas válidas

		            		if(salva_senha(vetorSenhas,conta)==1){
 80016f6:	2394      	movs	r3, #148	; 0x94
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2308      	movs	r3, #8
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f7fe ff9d 	bl	8000642 <salva_senha>
 8001708:	0003      	movs	r3, r0
 800170a:	2b01      	cmp	r3, #1
 800170c:	d150      	bne.n	80017b0 <main+0xfc4>

				            	// DONE

				            digitArr[0] = 0x5e;
 800170e:	003b      	movs	r3, r7
 8001710:	225e      	movs	r2, #94	; 0x5e
 8001712:	701a      	strb	r2, [r3, #0]
				            digitArr[1] = 0x5c;
 8001714:	003b      	movs	r3, r7
 8001716:	225c      	movs	r2, #92	; 0x5c
 8001718:	705a      	strb	r2, [r3, #1]
				            digitArr[2] = 0x54;
 800171a:	003b      	movs	r3, r7
 800171c:	2254      	movs	r2, #84	; 0x54
 800171e:	709a      	strb	r2, [r3, #2]
				            digitArr[3] = 0x79;
 8001720:	003b      	movs	r3, r7
 8001722:	2279      	movs	r2, #121	; 0x79
 8001724:	70da      	strb	r2, [r3, #3]


				            TM1637_Start();
 8001726:	f7fe ff0e 	bl	8000546 <TM1637_Start>
				            TM1637_WriteByte(0x40);
 800172a:	2040      	movs	r0, #64	; 0x40
 800172c:	f7fe ff40 	bl	80005b0 <TM1637_WriteByte>
				            TM1637_ReadResult();
 8001730:	f7fe ff2d 	bl	800058e <TM1637_ReadResult>
				            TM1637_Stop();
 8001734:	f7fe ff15 	bl	8000562 <TM1637_Stop>

				            TM1637_Start();
 8001738:	f7fe ff05 	bl	8000546 <TM1637_Start>
				            TM1637_WriteByte(0xc0);
 800173c:	20c0      	movs	r0, #192	; 0xc0
 800173e:	f7fe ff37 	bl	80005b0 <TM1637_WriteByte>
				            TM1637_ReadResult();
 8001742:	f7fe ff24 	bl	800058e <TM1637_ReadResult>

				            for (int i = 0; i < 4; ++i) {
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174a:	e00b      	b.n	8001764 <main+0xf78>
				                TM1637_WriteByte(digitArr[i]);
 800174c:	003a      	movs	r2, r7
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7fe ff2b 	bl	80005b0 <TM1637_WriteByte>
				                TM1637_ReadResult();
 800175a:	f7fe ff18 	bl	800058e <TM1637_ReadResult>
				            for (int i = 0; i < 4; ++i) {
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	3301      	adds	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001766:	2b03      	cmp	r3, #3
 8001768:	ddf0      	ble.n	800174c <main+0xf60>
				            }

				            TM1637_Stop();
 800176a:	f7fe fefa 	bl	8000562 <TM1637_Stop>

								HAL_UART_Transmit(&huart1, Senhasalva, sizeof(Senhasalva)-1, 100);
 800176e:	496c      	ldr	r1, [pc, #432]	; (8001920 <main+0x1134>)
 8001770:	4868      	ldr	r0, [pc, #416]	; (8001914 <main+0x1128>)
 8001772:	2364      	movs	r3, #100	; 0x64
 8001774:	220d      	movs	r2, #13
 8001776:	f002 f9d3 	bl	8003b20 <HAL_UART_Transmit>

			            		for(int k=0;k<conta;k++){
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
 800177e:	e010      	b.n	80017a2 <main+0xfb6>
			            			myData=vetorSenhas[k];
 8001780:	2308      	movs	r3, #8
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	58d3      	ldr	r3, [r2, r3]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
			            			HAL_UART_Transmit(&huart1, &myData, 1, 100);
 8001790:	1df9      	adds	r1, r7, #7
 8001792:	4860      	ldr	r0, [pc, #384]	; (8001914 <main+0x1128>)
 8001794:	2364      	movs	r3, #100	; 0x64
 8001796:	2201      	movs	r2, #1
 8001798:	f002 f9c2 	bl	8003b20 <HAL_UART_Transmit>
			            		for(int k=0;k<conta;k++){
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	3301      	adds	r3, #1
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a4:	2394      	movs	r3, #148	; 0x94
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbe8      	blt.n	8001780 <main+0xf94>
 80017ae:	e035      	b.n	800181c <main+0x1030>
		            		}
		            		else{

				            	// ERRO

				            digitArr[0] = 0x79;
 80017b0:	003b      	movs	r3, r7
 80017b2:	2279      	movs	r2, #121	; 0x79
 80017b4:	701a      	strb	r2, [r3, #0]
				            digitArr[1] = 0x50;
 80017b6:	003b      	movs	r3, r7
 80017b8:	2250      	movs	r2, #80	; 0x50
 80017ba:	705a      	strb	r2, [r3, #1]
				            digitArr[2] = 0x50;
 80017bc:	003b      	movs	r3, r7
 80017be:	2250      	movs	r2, #80	; 0x50
 80017c0:	709a      	strb	r2, [r3, #2]
				            digitArr[3] = 0x5c;
 80017c2:	003b      	movs	r3, r7
 80017c4:	225c      	movs	r2, #92	; 0x5c
 80017c6:	70da      	strb	r2, [r3, #3]


				            TM1637_Start();
 80017c8:	f7fe febd 	bl	8000546 <TM1637_Start>
				            TM1637_WriteByte(0x40);
 80017cc:	2040      	movs	r0, #64	; 0x40
 80017ce:	f7fe feef 	bl	80005b0 <TM1637_WriteByte>
				            TM1637_ReadResult();
 80017d2:	f7fe fedc 	bl	800058e <TM1637_ReadResult>
				            TM1637_Stop();
 80017d6:	f7fe fec4 	bl	8000562 <TM1637_Stop>

				            TM1637_Start();
 80017da:	f7fe feb4 	bl	8000546 <TM1637_Start>
				            TM1637_WriteByte(0xc0);
 80017de:	20c0      	movs	r0, #192	; 0xc0
 80017e0:	f7fe fee6 	bl	80005b0 <TM1637_WriteByte>
				            TM1637_ReadResult();
 80017e4:	f7fe fed3 	bl	800058e <TM1637_ReadResult>

				            for (int i = 0; i < 4; ++i) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	e00b      	b.n	8001806 <main+0x101a>
				                TM1637_WriteByte(digitArr[i]);
 80017ee:	003a      	movs	r2, r7
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe feda 	bl	80005b0 <TM1637_WriteByte>
				                TM1637_ReadResult();
 80017fc:	f7fe fec7 	bl	800058e <TM1637_ReadResult>
				            for (int i = 0; i < 4; ++i) {
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	3301      	adds	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	2b03      	cmp	r3, #3
 800180a:	ddf0      	ble.n	80017ee <main+0x1002>
				            }

				            TM1637_Stop();
 800180c:	f7fe fea9 	bl	8000562 <TM1637_Stop>

		            			HAL_UART_Transmit(&huart1, Memoriacheia, sizeof(Memoriacheia)-1, 100);
 8001810:	4944      	ldr	r1, [pc, #272]	; (8001924 <main+0x1138>)
 8001812:	4840      	ldr	r0, [pc, #256]	; (8001914 <main+0x1128>)
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	2234      	movs	r2, #52	; 0x34
 8001818:	f002 f982 	bl	8003b20 <HAL_UART_Transmit>
		            		}

		            	}
						HAL_UART_Transmit(&huart1, Space, sizeof(Space)-1, 100);
 800181c:	493f      	ldr	r1, [pc, #252]	; (800191c <main+0x1130>)
 800181e:	483d      	ldr	r0, [pc, #244]	; (8001914 <main+0x1128>)
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	2203      	movs	r2, #3
 8001824:	f002 f97c 	bl	8003b20 <HAL_UART_Transmit>
						HAL_Delay(2000);
 8001828:	23fa      	movs	r3, #250	; 0xfa
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	0018      	movs	r0, r3
 800182e:	f000 fb6f 	bl	8001f10 <HAL_Delay>

	            }

	            //APAGAR

	            senha = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	229c      	movs	r2, #156	; 0x9c
 8001836:	18ba      	adds	r2, r7, r2
 8001838:	6013      	str	r3, [r2, #0]
	            for (int i = 0; i < 4; ++i) {
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
 800183e:	e007      	b.n	8001850 <main+0x1064>
	                digitArr[i] = 0x08;
 8001840:	003a      	movs	r2, r7
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	18d3      	adds	r3, r2, r3
 8001846:	2208      	movs	r2, #8
 8001848:	701a      	strb	r2, [r3, #0]
	            for (int i = 0; i < 4; ++i) {
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	3301      	adds	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	2b03      	cmp	r3, #3
 8001854:	ddf4      	ble.n	8001840 <main+0x1054>
	            }

	            TM1637_Start();
 8001856:	f7fe fe76 	bl	8000546 <TM1637_Start>
	            TM1637_WriteByte(0x40);
 800185a:	2040      	movs	r0, #64	; 0x40
 800185c:	f7fe fea8 	bl	80005b0 <TM1637_WriteByte>
	            TM1637_ReadResult();
 8001860:	f7fe fe95 	bl	800058e <TM1637_ReadResult>
	            TM1637_Stop();
 8001864:	f7fe fe7d 	bl	8000562 <TM1637_Stop>

	            TM1637_Start();
 8001868:	f7fe fe6d 	bl	8000546 <TM1637_Start>
	            TM1637_WriteByte(0xc0);
 800186c:	20c0      	movs	r0, #192	; 0xc0
 800186e:	f7fe fe9f 	bl	80005b0 <TM1637_WriteByte>
	            TM1637_ReadResult();
 8001872:	f7fe fe8c 	bl	800058e <TM1637_ReadResult>

	            for (int i = 0; i < 4; ++i) {
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e00c      	b.n	8001896 <main+0x10aa>
	                TM1637_WriteByte(digitArr[3 - i]);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2203      	movs	r2, #3
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	003a      	movs	r2, r7
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	0018      	movs	r0, r3
 8001888:	f7fe fe92 	bl	80005b0 <TM1637_WriteByte>
	                TM1637_ReadResult();
 800188c:	f7fe fe7f 	bl	800058e <TM1637_ReadResult>
	            for (int i = 0; i < 4; ++i) {
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	3301      	adds	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	2b03      	cmp	r3, #3
 800189a:	ddef      	ble.n	800187c <main+0x1090>
	            }

	            TM1637_Stop();
 800189c:	f7fe fe61 	bl	8000562 <TM1637_Stop>
	            conta = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	2294      	movs	r2, #148	; 0x94
 80018a4:	18ba      	adds	r2, r7, r2
 80018a6:	6013      	str	r3, [r2, #0]

	            HAL_Delay(200);
 80018a8:	20c8      	movs	r0, #200	; 0xc8
 80018aa:	f000 fb31 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7fe fe32 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 80018b4:	20c8      	movs	r0, #200	; 0xc8
 80018b6:	f000 fb2b 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 80018ba:	2007      	movs	r0, #7
 80018bc:	f7fe fe2c 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 80018c0:	20c8      	movs	r0, #200	; 0xc8
 80018c2:	f000 fb25 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7fe fe26 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 80018cc:	20c8      	movs	r0, #200	; 0xc8
 80018ce:	f000 fb1f 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 80018d2:	2007      	movs	r0, #7
 80018d4:	f7fe fe20 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 80018d8:	20c8      	movs	r0, #200	; 0xc8
 80018da:	f000 fb19 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7fe fe1a 	bl	8000518 <TM1637_SetBrightness>
	            HAL_Delay(200);
 80018e4:	20c8      	movs	r0, #200	; 0xc8
 80018e6:	f000 fb13 	bl	8001f10 <HAL_Delay>
	            TM1637_SetBrightness(7);
 80018ea:	2007      	movs	r0, #7
 80018ec:	f7fe fe14 	bl	8000518 <TM1637_SetBrightness>
	      for (int i = 0; i < 4; i++) {
 80018f0:	2288      	movs	r2, #136	; 0x88
 80018f2:	18bb      	adds	r3, r7, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	18ba      	adds	r2, r7, r2
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	2388      	movs	r3, #136	; 0x88
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b03      	cmp	r3, #3
 8001904:	dc01      	bgt.n	800190a <main+0x111e>
 8001906:	f7ff f82a 	bl	800095e <main+0x172>
  {
 800190a:	f7ff f81e 	bl	800094a <main+0x15e>
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	200000a8 	.word	0x200000a8
 8001914:	20000128 	.word	0x20000128
 8001918:	20000030 	.word	0x20000030
 800191c:	200000b0 	.word	0x200000b0
 8001920:	20000020 	.word	0x20000020
 8001924:	20000070 	.word	0x20000070

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b097      	sub	sp, #92	; 0x5c
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	2428      	movs	r4, #40	; 0x28
 8001930:	193b      	adds	r3, r7, r4
 8001932:	0018      	movs	r0, r3
 8001934:	2330      	movs	r3, #48	; 0x30
 8001936:	001a      	movs	r2, r3
 8001938:	2100      	movs	r1, #0
 800193a:	f002 fcbf 	bl	80042bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193e:	2318      	movs	r3, #24
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	0018      	movs	r0, r3
 8001944:	2310      	movs	r3, #16
 8001946:	001a      	movs	r2, r3
 8001948:	2100      	movs	r1, #0
 800194a:	f002 fcb7 	bl	80042bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	0018      	movs	r0, r3
 8001952:	2314      	movs	r3, #20
 8001954:	001a      	movs	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	f002 fcb0 	bl	80042bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	0021      	movs	r1, r4
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2201      	movs	r2, #1
 8001968:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2210      	movs	r2, #16
 800196e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001970:	187b      	adds	r3, r7, r1
 8001972:	2202      	movs	r2, #2
 8001974:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	0352      	lsls	r2, r2, #13
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2200      	movs	r2, #0
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	187b      	adds	r3, r7, r1
 800198e:	0018      	movs	r0, r3
 8001990:	f001 fb22 	bl	8002fd8 <HAL_RCC_OscConfig>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001998:	f000 f932 	bl	8001c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	2118      	movs	r1, #24
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2202      	movs	r2, #2
 80019a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2101      	movs	r1, #1
 80019ba:	0018      	movs	r0, r3
 80019bc:	f001 fe2a 	bl	8003614 <HAL_RCC_ClockConfig>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80019c4:	f000 f91c 	bl	8001c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2221      	movs	r2, #33	; 0x21
 80019cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 ff6d 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019e6:	f000 f90b 	bl	8001c00 <Error_Handler>
  }
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b017      	add	sp, #92	; 0x5c
 80019f0:	bd90      	pop	{r4, r7, pc}
	...

080019f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_I2C1_Init+0x74>)
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <MX_I2C1_Init+0x78>)
 80019fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <MX_I2C1_Init+0x7c>)
 8001a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 fcef 	bl	8002414 <HAL_I2C_Init>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a3a:	f000 f8e1 	bl	8001c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a40:	2100      	movs	r1, #0
 8001a42:	0018      	movs	r0, r3
 8001a44:	f001 fa30 	bl	8002ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a4c:	f000 f8d8 	bl	8001c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <MX_I2C1_Init+0x74>)
 8001a52:	2100      	movs	r1, #0
 8001a54:	0018      	movs	r0, r3
 8001a56:	f001 fa73 	bl	8002f40 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a5e:	f000 f8cf 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	2000090e 	.word	0x2000090e

08001a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <MX_USART1_UART_Init+0x60>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a80:	2296      	movs	r2, #150	; 0x96
 8001a82:	0212      	lsls	r2, r2, #8
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0212      	lsls	r2, r2, #8
 8001aaa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <MX_USART1_UART_Init+0x5c>)
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 ffdb 	bl	8003a78 <HAL_UART_Init>
 8001ac2:	1e03      	subs	r3, r0, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001ac6:	f000 f89b 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000128 	.word	0x20000128
 8001ad4:	40013800 	.word	0x40013800

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	240c      	movs	r4, #12
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	2314      	movs	r3, #20
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f002 fbe7 	bl	80042bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	03c9      	lsls	r1, r1, #15
 8001af8:	430a      	orrs	r2, r1
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	03db      	lsls	r3, r3, #15
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0289      	lsls	r1, r1, #10
 8001b14:	430a      	orrs	r2, r1
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	4013      	ands	r3, r2
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	02c9      	lsls	r1, r1, #11
 8001b30:	430a      	orrs	r2, r1
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <MX_GPIO_Init+0x120>)
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	02db      	lsls	r3, r3, #11
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b42:	2390      	movs	r3, #144	; 0x90
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	2200      	movs	r2, #0
 8001b48:	218f      	movs	r1, #143	; 0x8f
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 fc45 	bl	80023da <HAL_GPIO_WritePin>
                          |CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <MX_GPIO_Init+0x124>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fc3f 	bl	80023da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	220f      	movs	r2, #15
 8001b60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2201      	movs	r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	193a      	adds	r2, r7, r4
 8001b76:	2390      	movs	r3, #144	; 0x90
 8001b78:	05db      	lsls	r3, r3, #23
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 fa9f 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2270      	movs	r2, #112	; 0x70
 8001b86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	2201      	movs	r2, #1
 8001b92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	193a      	adds	r2, r7, r4
 8001b96:	2390      	movs	r3, #144	; 0x90
 8001b98:	05db      	lsls	r3, r3, #23
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f000 fa8f 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_Pin */
  GPIO_InitStruct.Pin = CLK_Pin;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2201      	movs	r2, #1
 8001bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CLK_GPIO_Port, &GPIO_InitStruct);
 8001bba:	193a      	adds	r2, r7, r4
 8001bbc:	2390      	movs	r3, #144	; 0x90
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fa7c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8001bc8:	0021      	movs	r1, r4
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2203      	movs	r2, #3
 8001be0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <MX_GPIO_Init+0x124>)
 8001be6:	0019      	movs	r1, r3
 8001be8:	0010      	movs	r0, r2
 8001bea:	f000 fa69 	bl	80020c0 <HAL_GPIO_Init>

}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b009      	add	sp, #36	; 0x24
 8001bf4:	bd90      	pop	{r4, r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	48000400 	.word	0x48000400

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c04:	b672      	cpsid	i
}
 8001c06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <Error_Handler+0x8>
	...

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_MspInit+0x44>)
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_MspInit+0x44>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	619a      	str	r2, [r3, #24]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_MspInit+0x44>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_MspInit+0x44>)
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_MspInit+0x44>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0549      	lsls	r1, r1, #21
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_MspInit+0x44>)
 8001c3a:	69da      	ldr	r2, [r3, #28]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	4013      	ands	r3, r2
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	2414      	movs	r4, #20
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	0018      	movs	r0, r3
 8001c62:	2314      	movs	r3, #20
 8001c64:	001a      	movs	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f002 fb28 	bl	80042bc <memset>
  if(hi2c->Instance==I2C1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_I2C_MspInit+0x90>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d131      	bne.n	8001cda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	03c9      	lsls	r1, r1, #15
 8001c80:	430a      	orrs	r2, r1
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	03db      	lsls	r3, r3, #15
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c92:	0021      	movs	r1, r4
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2203      	movs	r2, #3
 8001c98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	2212      	movs	r2, #18
 8001c9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2201      	movs	r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_I2C_MspInit+0x98>)
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	0010      	movs	r0, r2
 8001cba:	f000 fa01 	bl	80020c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0389      	lsls	r1, r1, #14
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_I2C_MspInit+0x94>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b00b      	add	sp, #44	; 0x2c
 8001ce0:	bd90      	pop	{r4, r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	48001400 	.word	0x48001400

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	2414      	movs	r4, #20
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	2314      	movs	r3, #20
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f002 fada 	bl	80042bc <memset>
  if(huart->Instance==USART1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_UART_MspInit+0x94>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d133      	bne.n	8001d7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	01c9      	lsls	r1, r1, #7
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	619a      	str	r2, [r3, #24]
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0289      	lsls	r1, r1, #10
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_UART_MspInit+0x98>)
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	22c0      	movs	r2, #192	; 0xc0
 8001d4e:	00d2      	lsls	r2, r2, #3
 8001d50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	0021      	movs	r1, r4
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2202      	movs	r2, #2
 8001d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2203      	movs	r2, #3
 8001d64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2201      	movs	r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	187a      	adds	r2, r7, r1
 8001d6e:	2390      	movs	r3, #144	; 0x90
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 f9a3 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b00b      	add	sp, #44	; 0x2c
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40013800 	.word	0x40013800
 8001d88:	40021000 	.word	0x40021000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f892 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dc4:	4813      	ldr	r0, [pc, #76]	; (8001e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dc6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001dc8:	4813      	ldr	r0, [pc, #76]	; (8001e18 <LoopForever+0x6>)
    LDR R1, [R0]
 8001dca:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001dcc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <LoopForever+0xa>)
    CMP R1, R2
 8001dd0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001dd2:	d105      	bne.n	8001de0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001dd6:	4913      	ldr	r1, [pc, #76]	; (8001e24 <LoopForever+0x12>)
    STR R1, [R0]
 8001dd8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001dda:	4813      	ldr	r0, [pc, #76]	; (8001e28 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001ddc:	4913      	ldr	r1, [pc, #76]	; (8001e2c <LoopForever+0x1a>)
    STR R1, [R0]
 8001dde:	6001      	str	r1, [r0, #0]

08001de0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001de2:	4914      	ldr	r1, [pc, #80]	; (8001e34 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <LoopForever+0x26>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001df8:	4c11      	ldr	r4, [pc, #68]	; (8001e40 <LoopForever+0x2e>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e06:	f7ff ffd8 	bl	8001dba <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e0a:	f002 fa33 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0e:	f7fe fced 	bl	80007ec <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   r0, =_estack
 8001e14:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001e18:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001e1c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001e20:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001e24:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001e28:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001e2c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001e38:	08004324 	.word	0x08004324
  ldr r2, =_sbss
 8001e3c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001e40:	200001bc 	.word	0x200001bc

08001e44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC1_IRQHandler>
	...

08001e48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_Init+0x24>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_Init+0x24>)
 8001e52:	2110      	movs	r1, #16
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f809 	bl	8001e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fed5 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_InitTick+0x5c>)
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_InitTick+0x60>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	0019      	movs	r1, r3
 8001e82:	23fa      	movs	r3, #250	; 0xfa
 8001e84:	0098      	lsls	r0, r3, #2
 8001e86:	f7fe f93f 	bl	8000108 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f7fe f93a 	bl	8000108 <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f905 	bl	80020a6 <HAL_SYSTICK_Config>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e00f      	b.n	8001ec4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d80b      	bhi.n	8001ec2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	2301      	movs	r3, #1
 8001eae:	425b      	negs	r3, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f8e2 	bl	800207c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_InitTick+0x64>)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b003      	add	sp, #12
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	200000b4 	.word	0x200000b4
 8001ed0:	200000bc 	.word	0x200000bc
 8001ed4:	200000b8 	.word	0x200000b8

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	18d2      	adds	r2, r2, r3
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	200000bc 	.word	0x200000bc
 8001ef8:	200001b8 	.word	0x200001b8

08001efc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	200001b8 	.word	0x200001b8

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	189b      	adds	r3, r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	200000bc 	.word	0x200000bc

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	0002      	movs	r2, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f6c:	d828      	bhi.n	8001fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f6e:	4a2f      	ldr	r2, [pc, #188]	; (800202c <__NVIC_SetPriority+0xd4>)
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	33c0      	adds	r3, #192	; 0xc0
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	589b      	ldr	r3, [r3, r2]
 8001f7e:	1dfa      	adds	r2, r7, #7
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	0011      	movs	r1, r2
 8001f84:	2203      	movs	r2, #3
 8001f86:	400a      	ands	r2, r1
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	21ff      	movs	r1, #255	; 0xff
 8001f8c:	4091      	lsls	r1, r2
 8001f8e:	000a      	movs	r2, r1
 8001f90:	43d2      	mvns	r2, r2
 8001f92:	401a      	ands	r2, r3
 8001f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	019b      	lsls	r3, r3, #6
 8001f9a:	22ff      	movs	r2, #255	; 0xff
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	4003      	ands	r3, r0
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fac:	481f      	ldr	r0, [pc, #124]	; (800202c <__NVIC_SetPriority+0xd4>)
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	33c0      	adds	r3, #192	; 0xc0
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fbe:	e031      	b.n	8002024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <__NVIC_SetPriority+0xd8>)
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	230f      	movs	r3, #15
 8001fca:	400b      	ands	r3, r1
 8001fcc:	3b08      	subs	r3, #8
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	18d3      	adds	r3, r2, r3
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1dfa      	adds	r2, r7, #7
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	0011      	movs	r1, r2
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	00d2      	lsls	r2, r2, #3
 8001fe6:	21ff      	movs	r1, #255	; 0xff
 8001fe8:	4091      	lsls	r1, r2
 8001fea:	000a      	movs	r2, r1
 8001fec:	43d2      	mvns	r2, r2
 8001fee:	401a      	ands	r2, r3
 8001ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	0018      	movs	r0, r3
 8002000:	2303      	movs	r3, #3
 8002002:	4003      	ands	r3, r0
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <__NVIC_SetPriority+0xd8>)
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	001c      	movs	r4, r3
 8002010:	230f      	movs	r3, #15
 8002012:	4023      	ands	r3, r4
 8002014:	3b08      	subs	r3, #8
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	430a      	orrs	r2, r1
 800201a:	3306      	adds	r3, #6
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	18c3      	adds	r3, r0, r3
 8002020:	3304      	adds	r3, #4
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b003      	add	sp, #12
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	045b      	lsls	r3, r3, #17
 8002044:	429a      	cmp	r2, r3
 8002046:	d301      	bcc.n	800204c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002048:	2301      	movs	r3, #1
 800204a:	e010      	b.n	800206e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <SysTick_Config+0x44>)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	3a01      	subs	r2, #1
 8002052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002054:	2301      	movs	r3, #1
 8002056:	425b      	negs	r3, r3
 8002058:	2103      	movs	r1, #3
 800205a:	0018      	movs	r0, r3
 800205c:	f7ff ff7c 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x44>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x44>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	210f      	movs	r1, #15
 8002088:	187b      	adds	r3, r7, r1
 800208a:	1c02      	adds	r2, r0, #0
 800208c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	187b      	adds	r3, r7, r1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b25b      	sxtb	r3, r3
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ffbf 	bl	8002034 <SysTick_Config>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	e14f      	b.n	8002370 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4091      	lsls	r1, r2
 80020da:	000a      	movs	r2, r1
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d100      	bne.n	80020e8 <HAL_GPIO_Init+0x28>
 80020e6:	e140      	b.n	800236a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d130      	bne.n	8002162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	409a      	lsls	r2, r3
 800210e:	0013      	movs	r3, r2
 8002110:	43da      	mvns	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	409a      	lsls	r2, r3
 8002122:	0013      	movs	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	43da      	mvns	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	2201      	movs	r2, #1
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	4013      	ands	r3, r2
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	43da      	mvns	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2203      	movs	r2, #3
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d123      	bne.n	80021f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	58d3      	ldr	r3, [r2, r3]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2207      	movs	r2, #7
 80021bc:	4013      	ands	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	43da      	mvns	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2107      	movs	r1, #7
 80021d6:	400b      	ands	r3, r1
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	6939      	ldr	r1, [r7, #16]
 80021f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	43da      	mvns	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2203      	movs	r2, #3
 8002210:	401a      	ands	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	23c0      	movs	r3, #192	; 0xc0
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	4013      	ands	r3, r2
 8002230:	d100      	bne.n	8002234 <HAL_GPIO_Init+0x174>
 8002232:	e09a      	b.n	800236a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002234:	4b54      	ldr	r3, [pc, #336]	; (8002388 <HAL_GPIO_Init+0x2c8>)
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_GPIO_Init+0x2c8>)
 800223a:	2101      	movs	r1, #1
 800223c:	430a      	orrs	r2, r1
 800223e:	619a      	str	r2, [r3, #24]
 8002240:	4b51      	ldr	r3, [pc, #324]	; (8002388 <HAL_GPIO_Init+0x2c8>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_GPIO_Init+0x2cc>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	589b      	ldr	r3, [r3, r2]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2203      	movs	r2, #3
 800225e:	4013      	ands	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	409a      	lsls	r2, r3
 8002266:	0013      	movs	r3, r2
 8002268:	43da      	mvns	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	2390      	movs	r3, #144	; 0x90
 8002274:	05db      	lsls	r3, r3, #23
 8002276:	429a      	cmp	r2, r3
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x1e2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a44      	ldr	r2, [pc, #272]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x1de>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a43      	ldr	r2, [pc, #268]	; (8002394 <HAL_GPIO_Init+0x2d4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x1da>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_GPIO_Init+0x2d8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x1d6>
 8002292:	2303      	movs	r3, #3
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x1e4>
 8002296:	2305      	movs	r3, #5
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x1e4>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x1e4>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x1e4>
 80022a2:	2300      	movs	r3, #0
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	2103      	movs	r1, #3
 80022a8:	400a      	ands	r2, r1
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x2cc>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c2:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_GPIO_Init+0x2dc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	025b      	lsls	r3, r3, #9
 80022da:	4013      	ands	r3, r2
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022e6:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x2dc>)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_GPIO_Init+0x2dc>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	029b      	lsls	r3, r3, #10
 8002304:	4013      	ands	r3, r2
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_GPIO_Init+0x2dc>)
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_GPIO_Init+0x2dc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	035b      	lsls	r3, r3, #13
 800232e:	4013      	ands	r3, r2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_GPIO_Init+0x2dc>)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_GPIO_Init+0x2dc>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	039b      	lsls	r3, r3, #14
 8002358:	4013      	ands	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_GPIO_Init+0x2dc>)
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	40da      	lsrs	r2, r3
 8002378:	1e13      	subs	r3, r2, #0
 800237a:	d000      	beq.n	800237e <HAL_GPIO_Init+0x2be>
 800237c:	e6a8      	b.n	80020d0 <HAL_GPIO_Init+0x10>
  } 
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800
 8002398:	48000c00 	.word	0x48000c00
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	000a      	movs	r2, r1
 80023aa:	1cbb      	adds	r3, r7, #2
 80023ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	1cba      	adds	r2, r7, #2
 80023b4:	8812      	ldrh	r2, [r2, #0]
 80023b6:	4013      	ands	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023ba:	230f      	movs	r3, #15
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e003      	b.n	80023cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c4:	230f      	movs	r3, #15
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023cc:	230f      	movs	r3, #15
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	781b      	ldrb	r3, [r3, #0]
  }
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	0008      	movs	r0, r1
 80023e4:	0011      	movs	r1, r2
 80023e6:	1cbb      	adds	r3, r7, #2
 80023e8:	1c02      	adds	r2, r0, #0
 80023ea:	801a      	strh	r2, [r3, #0]
 80023ec:	1c7b      	adds	r3, r7, #1
 80023ee:	1c0a      	adds	r2, r1, #0
 80023f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f2:	1c7b      	adds	r3, r7, #1
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fa:	1cbb      	adds	r3, r7, #2
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002402:	e003      	b.n	800240c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002404:	1cbb      	adds	r3, r7, #2
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b002      	add	sp, #8
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e082      	b.n	800252c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2241      	movs	r2, #65	; 0x41
 800242a:	5c9b      	ldrb	r3, [r3, r2]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2240      	movs	r2, #64	; 0x40
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff fc09 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2124      	movs	r1, #36	; 0x24
 8002448:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4934      	ldr	r1, [pc, #208]	; (8002534 <HAL_I2C_Init+0x120>)
 8002464:	400a      	ands	r2, r1
 8002466:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4931      	ldr	r1, [pc, #196]	; (8002538 <HAL_I2C_Init+0x124>)
 8002474:	400a      	ands	r2, r1
 8002476:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d108      	bne.n	8002492 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0209      	lsls	r1, r1, #8
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e007      	b.n	80024a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2184      	movs	r1, #132	; 0x84
 800249c:	0209      	lsls	r1, r1, #8
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d104      	bne.n	80024b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	491f      	ldr	r1, [pc, #124]	; (800253c <HAL_I2C_Init+0x128>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	491a      	ldr	r1, [pc, #104]	; (8002538 <HAL_I2C_Init+0x124>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	431a      	orrs	r2, r3
 80024de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69d9      	ldr	r1, [r3, #28]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2241      	movs	r2, #65	; 0x41
 8002518:	2120      	movs	r1, #32
 800251a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2242      	movs	r2, #66	; 0x42
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}
 8002534:	f0ffffff 	.word	0xf0ffffff
 8002538:	ffff7fff 	.word	0xffff7fff
 800253c:	02008000 	.word	0x02008000

08002540 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	000c      	movs	r4, r1
 800254a:	0010      	movs	r0, r2
 800254c:	0019      	movs	r1, r3
 800254e:	230a      	movs	r3, #10
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	1c22      	adds	r2, r4, #0
 8002554:	801a      	strh	r2, [r3, #0]
 8002556:	2308      	movs	r3, #8
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	1c02      	adds	r2, r0, #0
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	1c0a      	adds	r2, r1, #0
 8002562:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2241      	movs	r2, #65	; 0x41
 8002568:	5c9b      	ldrb	r3, [r3, r2]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b20      	cmp	r3, #32
 800256e:	d000      	beq.n	8002572 <HAL_I2C_Mem_Write+0x32>
 8002570:	e10c      	b.n	800278c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_I2C_Mem_Write+0x42>
 8002578:	232c      	movs	r3, #44	; 0x2c
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0ff      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_I2C_Mem_Write+0x5c>
 8002598:	2302      	movs	r3, #2
 800259a:	e0f8      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	2101      	movs	r1, #1
 80025a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025a4:	f7ff fcaa 	bl	8001efc <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2319      	movs	r3, #25
 80025b8:	2201      	movs	r2, #1
 80025ba:	f000 fb0b 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0e3      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2241      	movs	r2, #65	; 0x41
 80025ca:	2121      	movs	r1, #33	; 0x21
 80025cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2242      	movs	r2, #66	; 0x42
 80025d2:	2140      	movs	r1, #64	; 0x40
 80025d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	222c      	movs	r2, #44	; 0x2c
 80025e6:	18ba      	adds	r2, r7, r2
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f2:	1dbb      	adds	r3, r7, #6
 80025f4:	881c      	ldrh	r4, [r3, #0]
 80025f6:	2308      	movs	r3, #8
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	230a      	movs	r3, #10
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	8819      	ldrh	r1, [r3, #0]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	0023      	movs	r3, r4
 800260e:	f000 f9f9 	bl	8002a04 <I2C_RequestMemoryWrite>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d005      	beq.n	8002622 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0b5      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d911      	bls.n	8002650 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	b2da      	uxtb	r2, r3
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	045c      	lsls	r4, r3, #17
 800263c:	230a      	movs	r3, #10
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	8819      	ldrh	r1, [r3, #0]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	2300      	movs	r3, #0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	0023      	movs	r3, r4
 800264a:	f000 fbf7 	bl	8002e3c <I2C_TransferConfig>
 800264e:	e012      	b.n	8002676 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	049c      	lsls	r4, r3, #18
 8002664:	230a      	movs	r3, #10
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	8819      	ldrh	r1, [r3, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	0023      	movs	r3, r4
 8002672:	f000 fbe3 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fae8 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e081      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03a      	beq.n	800273a <HAL_I2C_Mem_Write+0x1fa>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d136      	bne.n	800273a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	0013      	movs	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	f000 fa7b 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e053      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d911      	bls.n	8002714 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	045c      	lsls	r4, r3, #17
 8002700:	230a      	movs	r3, #10
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	8819      	ldrh	r1, [r3, #0]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0023      	movs	r3, r4
 800270e:	f000 fb95 	bl	8002e3c <I2C_TransferConfig>
 8002712:	e012      	b.n	800273a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	049c      	lsls	r4, r3, #18
 8002728:	230a      	movs	r3, #10
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	0023      	movs	r3, r4
 8002736:	f000 fb81 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d198      	bne.n	8002676 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fac0 	bl	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_I2C_Mem_Write+0x258>)
 800276c:	400a      	ands	r2, r1
 800276e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2241      	movs	r2, #65	; 0x41
 8002774:	2120      	movs	r1, #32
 8002776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2242      	movs	r2, #66	; 0x42
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b007      	add	sp, #28
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	000c      	movs	r4, r1
 80027a6:	0010      	movs	r0, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	230a      	movs	r3, #10
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	1c22      	adds	r2, r4, #0
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	2308      	movs	r3, #8
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	1c02      	adds	r2, r0, #0
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	1c0a      	adds	r2, r1, #0
 80027be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2241      	movs	r2, #65	; 0x41
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d000      	beq.n	80027ce <HAL_I2C_Mem_Read+0x32>
 80027cc:	e110      	b.n	80029f0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_I2C_Mem_Read+0x42>
 80027d4:	232c      	movs	r3, #44	; 0x2c
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e103      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2240      	movs	r2, #64	; 0x40
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x5c>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0fc      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	2101      	movs	r1, #1
 80027fe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002800:	f7ff fb7c 	bl	8001efc <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	0219      	lsls	r1, r3, #8
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2319      	movs	r3, #25
 8002814:	2201      	movs	r2, #1
 8002816:	f000 f9dd 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0e7      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2241      	movs	r2, #65	; 0x41
 8002826:	2122      	movs	r1, #34	; 0x22
 8002828:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2242      	movs	r2, #66	; 0x42
 800282e:	2140      	movs	r1, #64	; 0x40
 8002830:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	222c      	movs	r2, #44	; 0x2c
 8002842:	18ba      	adds	r2, r7, r2
 8002844:	8812      	ldrh	r2, [r2, #0]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284e:	1dbb      	adds	r3, r7, #6
 8002850:	881c      	ldrh	r4, [r3, #0]
 8002852:	2308      	movs	r3, #8
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	230a      	movs	r3, #10
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	8819      	ldrh	r1, [r3, #0]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	0023      	movs	r3, r4
 800286a:	f000 f92f 	bl	8002acc <I2C_RequestMemoryRead>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d005      	beq.n	800287e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0b9      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d911      	bls.n	80028ac <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	b2da      	uxtb	r2, r3
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	045c      	lsls	r4, r3, #17
 8002898:	230a      	movs	r3, #10
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	8819      	ldrh	r1, [r3, #0]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	4b56      	ldr	r3, [pc, #344]	; (80029fc <HAL_I2C_Mem_Read+0x260>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	0023      	movs	r3, r4
 80028a6:	f000 fac9 	bl	8002e3c <I2C_TransferConfig>
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	049c      	lsls	r4, r3, #18
 80028c0:	230a      	movs	r3, #10
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	8819      	ldrh	r1, [r3, #0]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_I2C_Mem_Read+0x260>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	0023      	movs	r3, r4
 80028ce:	f000 fab5 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	0013      	movs	r3, r2
 80028dc:	2200      	movs	r2, #0
 80028de:	2104      	movs	r1, #4
 80028e0:	f000 f978 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e082      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d03a      	beq.n	800299e <HAL_I2C_Mem_Read+0x202>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d136      	bne.n	800299e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	0013      	movs	r3, r2
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	f000 f949 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e053      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d911      	bls.n	8002978 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	22ff      	movs	r2, #255	; 0xff
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	045c      	lsls	r4, r3, #17
 8002964:	230a      	movs	r3, #10
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	8819      	ldrh	r1, [r3, #0]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	0023      	movs	r3, r4
 8002972:	f000 fa63 	bl	8002e3c <I2C_TransferConfig>
 8002976:	e012      	b.n	800299e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	b2da      	uxtb	r2, r3
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	049c      	lsls	r4, r3, #18
 800298c:	230a      	movs	r3, #10
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	8819      	ldrh	r1, [r3, #0]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	0023      	movs	r3, r4
 800299a:	f000 fa4f 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d194      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f98e 	bl	8002cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029b4:	1e03      	subs	r3, r0, #0
 80029b6:	d001      	beq.n	80029bc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e01a      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2220      	movs	r2, #32
 80029c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	490c      	ldr	r1, [pc, #48]	; (8002a00 <HAL_I2C_Mem_Read+0x264>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2241      	movs	r2, #65	; 0x41
 80029d8:	2120      	movs	r1, #32
 80029da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2242      	movs	r2, #66	; 0x42
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b007      	add	sp, #28
 80029f8:	bd90      	pop	{r4, r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	80002400 	.word	0x80002400
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	000c      	movs	r4, r1
 8002a0e:	0010      	movs	r0, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	250a      	movs	r5, #10
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	1c22      	adds	r2, r4, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	1c02      	adds	r2, r0, #0
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	1dbb      	adds	r3, r7, #6
 8002a24:	1c0a      	adds	r2, r1, #0
 8002a26:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a28:	1dbb      	adds	r3, r7, #6
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	045c      	lsls	r4, r3, #17
 8002a32:	197b      	adds	r3, r7, r5
 8002a34:	8819      	ldrh	r1, [r3, #0]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <I2C_RequestMemoryWrite+0xc4>)
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	0023      	movs	r3, r4
 8002a3e:	f000 f9fd 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f902 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e033      	b.n	8002abe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5e:	2308      	movs	r3, #8
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6c:	e019      	b.n	8002aa2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a6e:	2308      	movs	r3, #8
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6a39      	ldr	r1, [r7, #32]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f8e3 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e014      	b.n	8002abe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a94:	2308      	movs	r3, #8
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	0013      	movs	r3, r2
 8002aac:	2200      	movs	r2, #0
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	f000 f890 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	80002000 	.word	0x80002000

08002acc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	000c      	movs	r4, r1
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	250a      	movs	r5, #10
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	1c22      	adds	r2, r4, #0
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	1c02      	adds	r2, r0, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	1c0a      	adds	r2, r1, #0
 8002aee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	197b      	adds	r3, r7, r5
 8002af8:	8819      	ldrh	r1, [r3, #0]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <I2C_RequestMemoryRead+0xc0>)
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	f000 f99b 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f8a0 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e033      	b.n	8002b82 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b1a:	1dbb      	adds	r3, r7, #6
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	2308      	movs	r3, #8
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b30:	e019      	b.n	8002b66 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b32:	2308      	movs	r3, #8
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	6a39      	ldr	r1, [r7, #32]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f881 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e014      	b.n	8002b82 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b58:	2308      	movs	r3, #8
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a3a      	ldr	r2, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	0013      	movs	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	f000 f82e 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d001      	beq.n	8002b80 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b004      	add	sp, #16
 8002b88:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	80002000 	.word	0x80002000

08002b90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d103      	bne.n	8002bae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d007      	beq.n	8002bcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]
  }
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	1dfb      	adds	r3, r7, #7
 8002be2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be4:	e021      	b.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	d01e      	beq.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7ff f986 	bl	8001efc <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d113      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	2220      	movs	r2, #32
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2241      	movs	r2, #65	; 0x41
 8002c12:	2120      	movs	r1, #32
 8002c14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2242      	movs	r2, #66	; 0x42
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2240      	movs	r2, #64	; 0x40
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	425a      	negs	r2, r3
 8002c3a:	4153      	adcs	r3, r2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	001a      	movs	r2, r3
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0ce      	beq.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c5e:	e02b      	b.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f86e 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e029      	b.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	3301      	adds	r3, #1
 8002c78:	d01e      	beq.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f93f 	bl	8001efc <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d113      	bne.n	8002cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	2220      	movs	r2, #32
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2241      	movs	r2, #65	; 0x41
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2242      	movs	r2, #66	; 0x42
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d1cc      	bne.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cdc:	e028      	b.n	8002d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 f82f 	bl	8002d48 <I2C_IsAcknowledgeFailed>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e026      	b.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7ff f903 	bl	8001efc <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d113      	bne.n	8002d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2241      	movs	r2, #65	; 0x41
 8002d18:	2120      	movs	r1, #32
 8002d1a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2242      	movs	r2, #66	; 0x42
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2240      	movs	r2, #64	; 0x40
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e007      	b.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d1cf      	bne.n	8002cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b004      	add	sp, #16
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d164      	bne.n	8002e2c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	049b      	lsls	r3, r3, #18
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	049b      	lsls	r3, r3, #18
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d02b      	beq.n	8002dce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2180      	movs	r1, #128	; 0x80
 8002d82:	01c9      	lsls	r1, r1, #7
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d88:	e021      	b.n	8002dce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	d01e      	beq.n	8002dce <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d90:	f7ff f8b4 	bl	8001efc <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d302      	bcc.n	8002da6 <I2C_IsAcknowledgeFailed+0x5e>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d113      	bne.n	8002dce <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	2220      	movs	r2, #32
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2241      	movs	r2, #65	; 0x41
 8002db6:	2120      	movs	r1, #32
 8002db8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2242      	movs	r2, #66	; 0x42
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e02f      	b.n	8002e2e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d1d6      	bne.n	8002d8a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2220      	movs	r2, #32
 8002dea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fece 	bl	8002b90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	490e      	ldr	r1, [pc, #56]	; (8002e38 <I2C_IsAcknowledgeFailed+0xf0>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	2204      	movs	r2, #4
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2241      	movs	r2, #65	; 0x41
 8002e14:	2120      	movs	r1, #32
 8002e16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2242      	movs	r2, #66	; 0x42
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2240      	movs	r2, #64	; 0x40
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	0008      	movs	r0, r1
 8002e46:	0011      	movs	r1, r2
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	240a      	movs	r4, #10
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	1c02      	adds	r2, r0, #0
 8002e50:	801a      	strh	r2, [r3, #0]
 8002e52:	2009      	movs	r0, #9
 8002e54:	183b      	adds	r3, r7, r0
 8002e56:	1c0a      	adds	r2, r1, #0
 8002e58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	0d51      	lsrs	r1, r2, #21
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	00d2      	lsls	r2, r2, #3
 8002e68:	400a      	ands	r2, r1
 8002e6a:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <I2C_TransferConfig+0x68>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	43d2      	mvns	r2, r2
 8002e70:	401a      	ands	r2, r3
 8002e72:	0011      	movs	r1, r2
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	059b      	lsls	r3, r3, #22
 8002e7a:	0d9a      	lsrs	r2, r3, #22
 8002e7c:	183b      	adds	r3, r7, r0
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	0418      	lsls	r0, r3, #16
 8002e82:	23ff      	movs	r3, #255	; 0xff
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4003      	ands	r3, r0
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b005      	add	sp, #20
 8002ea0:	bd90      	pop	{r4, r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	03ff63ff 	.word	0x03ff63ff

08002ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2241      	movs	r2, #65	; 0x41
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d138      	bne.n	8002f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2240      	movs	r2, #64	; 0x40
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e032      	b.n	8002f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2241      	movs	r2, #65	; 0x41
 8002ed8:	2124      	movs	r1, #36	; 0x24
 8002eda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4911      	ldr	r1, [pc, #68]	; (8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2241      	movs	r2, #65	; 0x41
 8002f20:	2120      	movs	r1, #32
 8002f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2240      	movs	r2, #64	; 0x40
 8002f28:	2100      	movs	r1, #0
 8002f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	ffffefff 	.word	0xffffefff

08002f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2241      	movs	r2, #65	; 0x41
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d139      	bne.n	8002fca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e033      	b.n	8002fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	2101      	movs	r1, #1
 8002f6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2241      	movs	r2, #65	; 0x41
 8002f70:	2124      	movs	r1, #36	; 0x24
 8002f72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2241      	movs	r2, #65	; 0x41
 8002fba:	2120      	movs	r1, #32
 8002fbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2240      	movs	r2, #64	; 0x40
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fffff0ff 	.word	0xfffff0ff

08002fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e305      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x1e>
 8002ff4:	e08d      	b.n	8003112 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ff6:	4bc5      	ldr	r3, [pc, #788]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00e      	beq.n	8003020 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003002:	4bc2      	ldr	r3, [pc, #776]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	220c      	movs	r2, #12
 8003008:	4013      	ands	r3, r2
 800300a:	2b08      	cmp	r3, #8
 800300c:	d116      	bne.n	800303c <HAL_RCC_OscConfig+0x64>
 800300e:	4bbf      	ldr	r3, [pc, #764]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	23c0      	movs	r3, #192	; 0xc0
 8003014:	025b      	lsls	r3, r3, #9
 8003016:	401a      	ands	r2, r3
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	025b      	lsls	r3, r3, #9
 800301c:	429a      	cmp	r2, r3
 800301e:	d10d      	bne.n	800303c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4bba      	ldr	r3, [pc, #744]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_RCC_OscConfig+0x56>
 800302c:	e070      	b.n	8003110 <HAL_RCC_OscConfig+0x138>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d000      	beq.n	8003038 <HAL_RCC_OscConfig+0x60>
 8003036:	e06b      	b.n	8003110 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e2dc      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x7c>
 8003044:	4bb1      	ldr	r3, [pc, #708]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4bb0      	ldr	r3, [pc, #704]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0249      	lsls	r1, r1, #9
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e02f      	b.n	80030b4 <HAL_RCC_OscConfig+0xdc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x9e>
 800305c:	4bab      	ldr	r3, [pc, #684]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4baa      	ldr	r3, [pc, #680]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003062:	49ab      	ldr	r1, [pc, #684]	; (8003310 <HAL_RCC_OscConfig+0x338>)
 8003064:	400a      	ands	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	4ba8      	ldr	r3, [pc, #672]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4ba7      	ldr	r3, [pc, #668]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800306e:	49a9      	ldr	r1, [pc, #676]	; (8003314 <HAL_RCC_OscConfig+0x33c>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e01e      	b.n	80030b4 <HAL_RCC_OscConfig+0xdc>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b05      	cmp	r3, #5
 800307c:	d10e      	bne.n	800309c <HAL_RCC_OscConfig+0xc4>
 800307e:	4ba3      	ldr	r3, [pc, #652]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4ba2      	ldr	r3, [pc, #648]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	02c9      	lsls	r1, r1, #11
 8003088:	430a      	orrs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	4b9f      	ldr	r3, [pc, #636]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	0249      	lsls	r1, r1, #9
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0xdc>
 800309c:	4b9b      	ldr	r3, [pc, #620]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b9a      	ldr	r3, [pc, #616]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80030a2:	499b      	ldr	r1, [pc, #620]	; (8003310 <HAL_RCC_OscConfig+0x338>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	4b98      	ldr	r3, [pc, #608]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b97      	ldr	r3, [pc, #604]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80030ae:	4999      	ldr	r1, [pc, #612]	; (8003314 <HAL_RCC_OscConfig+0x33c>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d014      	beq.n	80030e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe ff1e 	bl	8001efc <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c6:	f7fe ff19 	bl	8001efc <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e28e      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	4b8c      	ldr	r3, [pc, #560]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	029b      	lsls	r3, r3, #10
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0xee>
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe ff09 	bl	8001efc <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe ff04 	bl	8001efc <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e279      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b82      	ldr	r3, [pc, #520]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	4013      	ands	r3, r2
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x118>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d100      	bne.n	800311e <HAL_RCC_OscConfig+0x146>
 800311c:	e06c      	b.n	80031f8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800311e:	4b7b      	ldr	r3, [pc, #492]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	220c      	movs	r2, #12
 8003124:	4013      	ands	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003128:	4b78      	ldr	r3, [pc, #480]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	220c      	movs	r2, #12
 800312e:	4013      	ands	r3, r2
 8003130:	2b08      	cmp	r3, #8
 8003132:	d11f      	bne.n	8003174 <HAL_RCC_OscConfig+0x19c>
 8003134:	4b75      	ldr	r3, [pc, #468]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	23c0      	movs	r3, #192	; 0xc0
 800313a:	025b      	lsls	r3, r3, #9
 800313c:	401a      	ands	r2, r3
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	429a      	cmp	r2, r3
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b71      	ldr	r3, [pc, #452]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2202      	movs	r2, #2
 800314c:	4013      	ands	r3, r2
 800314e:	d005      	beq.n	800315c <HAL_RCC_OscConfig+0x184>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d001      	beq.n	800315c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e24c      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b6b      	ldr	r3, [pc, #428]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	22f8      	movs	r2, #248	; 0xf8
 8003162:	4393      	bics	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00da      	lsls	r2, r3, #3
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e041      	b.n	80031f8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d024      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003182:	2101      	movs	r1, #1
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe feb8 	bl	8001efc <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003192:	f7fe feb3 	bl	8001efc <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e228      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d0f1      	beq.n	8003192 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b57      	ldr	r3, [pc, #348]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	22f8      	movs	r2, #248	; 0xf8
 80031b4:	4393      	bics	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	00da      	lsls	r2, r3, #3
 80031be:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e018      	b.n	80031f8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031cc:	2101      	movs	r1, #1
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe fe93 	bl	8001efc <HAL_GetTick>
 80031d6:	0003      	movs	r3, r0
 80031d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe fe8e 	bl	8001efc <HAL_GetTick>
 80031e0:	0002      	movs	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e203      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d1f1      	bne.n	80031dc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2208      	movs	r2, #8
 80031fe:	4013      	ands	r3, r2
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d019      	beq.n	800323e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b40      	ldr	r3, [pc, #256]	; (800330c <HAL_RCC_OscConfig+0x334>)
 800320c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003210:	2101      	movs	r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fe fe71 	bl	8001efc <HAL_GetTick>
 800321a:	0003      	movs	r3, r0
 800321c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe fe6c 	bl	8001efc <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1e1      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d0f1      	beq.n	8003220 <HAL_RCC_OscConfig+0x248>
 800323c:	e018      	b.n	8003270 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003244:	2101      	movs	r1, #1
 8003246:	438a      	bics	r2, r1
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fe57 	bl	8001efc <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe fe52 	bl	8001efc <HAL_GetTick>
 8003258:	0002      	movs	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e1c7      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2202      	movs	r2, #2
 800326c:	4013      	ands	r3, r2
 800326e:	d1f1      	bne.n	8003254 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2204      	movs	r2, #4
 8003276:	4013      	ands	r3, r2
 8003278:	d100      	bne.n	800327c <HAL_RCC_OscConfig+0x2a4>
 800327a:	e0b5      	b.n	80033e8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327c:	201f      	movs	r0, #31
 800327e:	183b      	adds	r3, r7, r0
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	055b      	lsls	r3, r3, #21
 800328c:	4013      	ands	r3, r2
 800328e:	d110      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0549      	lsls	r1, r1, #21
 800329a:	430a      	orrs	r2, r1
 800329c:	61da      	str	r2, [r3, #28]
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	055b      	lsls	r3, r3, #21
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ac:	183b      	adds	r3, r7, r0
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_OscConfig+0x340>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	d11a      	bne.n	80032f4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCC_OscConfig+0x340>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_RCC_OscConfig+0x340>)
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	0049      	lsls	r1, r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032cc:	f7fe fe16 	bl	8001efc <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe fe11 	bl	8001efc <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b64      	cmp	r3, #100	; 0x64
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e186      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_OscConfig+0x340>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10f      	bne.n	800331c <HAL_RCC_OscConfig+0x344>
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCC_OscConfig+0x334>)
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <HAL_RCC_OscConfig+0x334>)
 8003302:	2101      	movs	r1, #1
 8003304:	430a      	orrs	r2, r1
 8003306:	621a      	str	r2, [r3, #32]
 8003308:	e036      	b.n	8003378 <HAL_RCC_OscConfig+0x3a0>
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	40021000 	.word	0x40021000
 8003310:	fffeffff 	.word	0xfffeffff
 8003314:	fffbffff 	.word	0xfffbffff
 8003318:	40007000 	.word	0x40007000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10c      	bne.n	800333e <HAL_RCC_OscConfig+0x366>
 8003324:	4bb6      	ldr	r3, [pc, #728]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	4bb5      	ldr	r3, [pc, #724]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	621a      	str	r2, [r3, #32]
 8003330:	4bb3      	ldr	r3, [pc, #716]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	4bb2      	ldr	r3, [pc, #712]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003336:	2104      	movs	r1, #4
 8003338:	438a      	bics	r2, r1
 800333a:	621a      	str	r2, [r3, #32]
 800333c:	e01c      	b.n	8003378 <HAL_RCC_OscConfig+0x3a0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x388>
 8003346:	4bae      	ldr	r3, [pc, #696]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	4bad      	ldr	r3, [pc, #692]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800334c:	2104      	movs	r1, #4
 800334e:	430a      	orrs	r2, r1
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	4bab      	ldr	r3, [pc, #684]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003354:	6a1a      	ldr	r2, [r3, #32]
 8003356:	4baa      	ldr	r3, [pc, #680]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003358:	2101      	movs	r1, #1
 800335a:	430a      	orrs	r2, r1
 800335c:	621a      	str	r2, [r3, #32]
 800335e:	e00b      	b.n	8003378 <HAL_RCC_OscConfig+0x3a0>
 8003360:	4ba7      	ldr	r3, [pc, #668]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003362:	6a1a      	ldr	r2, [r3, #32]
 8003364:	4ba6      	ldr	r3, [pc, #664]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	621a      	str	r2, [r3, #32]
 800336c:	4ba4      	ldr	r3, [pc, #656]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800336e:	6a1a      	ldr	r2, [r3, #32]
 8003370:	4ba3      	ldr	r3, [pc, #652]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003372:	2104      	movs	r1, #4
 8003374:	438a      	bics	r2, r1
 8003376:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d014      	beq.n	80033aa <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fe fdbc 	bl	8001efc <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003388:	e009      	b.n	800339e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe fdb7 	bl	8001efc <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	4a9b      	ldr	r2, [pc, #620]	; (8003604 <HAL_RCC_OscConfig+0x62c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e12b      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	4b98      	ldr	r3, [pc, #608]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x3b2>
 80033a8:	e013      	b.n	80033d2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fe fda7 	bl	8001efc <HAL_GetTick>
 80033ae:	0003      	movs	r3, r0
 80033b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b2:	e009      	b.n	80033c8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b4:	f7fe fda2 	bl	8001efc <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	4a91      	ldr	r2, [pc, #580]	; (8003604 <HAL_RCC_OscConfig+0x62c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e116      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c8:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d2:	231f      	movs	r3, #31
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80033de:	69da      	ldr	r2, [r3, #28]
 80033e0:	4b87      	ldr	r3, [pc, #540]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80033e2:	4989      	ldr	r1, [pc, #548]	; (8003608 <HAL_RCC_OscConfig+0x630>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	4013      	ands	r3, r2
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d12a      	bne.n	8003450 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033fa:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	4b80      	ldr	r3, [pc, #512]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003400:	2104      	movs	r1, #4
 8003402:	430a      	orrs	r2, r1
 8003404:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003406:	4b7e      	ldr	r3, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340a:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800340c:	2101      	movs	r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fd73 	bl	8001efc <HAL_GetTick>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800341c:	f7fe fd6e 	bl	8001efc <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0e3      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	d0f1      	beq.n	800341c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003438:	4b71      	ldr	r3, [pc, #452]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	22f8      	movs	r2, #248	; 0xf8
 800343e:	4393      	bics	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800344a:	430a      	orrs	r2, r1
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
 800344e:	e034      	b.n	80034ba <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	3305      	adds	r3, #5
 8003456:	d111      	bne.n	800347c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003458:	4b69      	ldr	r3, [pc, #420]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800345e:	2104      	movs	r1, #4
 8003460:	438a      	bics	r2, r1
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	22f8      	movs	r2, #248	; 0xf8
 800346a:	4393      	bics	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	00da      	lsls	r2, r3, #3
 8003474:	4b62      	ldr	r3, [pc, #392]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003476:	430a      	orrs	r2, r1
 8003478:	635a      	str	r2, [r3, #52]	; 0x34
 800347a:	e01e      	b.n	80034ba <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800347c:	4b60      	ldr	r3, [pc, #384]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800347e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003480:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003482:	2104      	movs	r1, #4
 8003484:	430a      	orrs	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003488:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800348a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348c:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800348e:	2101      	movs	r1, #1
 8003490:	438a      	bics	r2, r1
 8003492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7fe fd32 	bl	8001efc <HAL_GetTick>
 8003498:	0003      	movs	r3, r0
 800349a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800349e:	f7fe fd2d 	bl	8001efc <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0a2      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	2202      	movs	r2, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	d1f1      	bne.n	800349e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d100      	bne.n	80034c4 <HAL_RCC_OscConfig+0x4ec>
 80034c2:	e097      	b.n	80035f4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	220c      	movs	r2, #12
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d100      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4fa>
 80034d0:	e06b      	b.n	80035aa <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d14c      	bne.n	8003574 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80034e0:	494a      	ldr	r1, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x634>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fd09 	bl	8001efc <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe fd04 	bl	8001efc <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e079      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	049b      	lsls	r3, r3, #18
 800350a:	4013      	ands	r3, r2
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	220f      	movs	r2, #15
 8003514:	4393      	bics	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a3a      	ldr	r2, [pc, #232]	; (8003610 <HAL_RCC_OscConfig+0x638>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	431a      	orrs	r2, r3
 8003536:	4b32      	ldr	r3, [pc, #200]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	0449      	lsls	r1, r1, #17
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe fcd7 	bl	8001efc <HAL_GetTick>
 800354e:	0003      	movs	r3, r0
 8003550:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe fcd2 	bl	8001efc <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e047      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	049b      	lsls	r3, r3, #18
 800356e:	4013      	ands	r3, r2
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x57c>
 8003572:	e03f      	b.n	80035f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800357a:	4924      	ldr	r1, [pc, #144]	; (800360c <HAL_RCC_OscConfig+0x634>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fcbc 	bl	8001efc <HAL_GetTick>
 8003584:	0003      	movs	r3, r0
 8003586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fcb7 	bl	8001efc <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e02c      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	049b      	lsls	r3, r3, #18
 80035a4:	4013      	ands	r3, r2
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x5b2>
 80035a8:	e024      	b.n	80035f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01f      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80035bc:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x628>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	23c0      	movs	r3, #192	; 0xc0
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	401a      	ands	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10e      	bne.n	80035f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	220f      	movs	r2, #15
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	23f0      	movs	r3, #240	; 0xf0
 80035e4:	039b      	lsls	r3, r3, #14
 80035e6:	401a      	ands	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b008      	add	sp, #32
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	40021000 	.word	0x40021000
 8003604:	00001388 	.word	0x00001388
 8003608:	efffffff 	.word	0xefffffff
 800360c:	feffffff 	.word	0xfeffffff
 8003610:	ffc27fff 	.word	0xffc27fff

08003614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0b3      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d911      	bls.n	800365a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	4393      	bics	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e09a      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d015      	beq.n	8003690 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2204      	movs	r2, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d006      	beq.n	800367c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 8003674:	21e0      	movs	r1, #224	; 0xe0
 8003676:	00c9      	lsls	r1, r1, #3
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	22f0      	movs	r2, #240	; 0xf0
 8003682:	4393      	bics	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	d040      	beq.n	800371c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	029b      	lsls	r3, r3, #10
 80036aa:	4013      	ands	r3, r2
 80036ac:	d114      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06e      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	049b      	lsls	r3, r3, #18
 80036c2:	4013      	ands	r3, r2
 80036c4:	d108      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e062      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b34      	ldr	r3, [pc, #208]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e05b      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d8:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fc06 	bl	8001efc <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	e009      	b.n	800370a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f6:	f7fe fc01 	bl	8001efc <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x18c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e042      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	220c      	movs	r2, #12
 8003710:	401a      	ands	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1ec      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	4013      	ands	r3, r2
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d211      	bcs.n	800374e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4393      	bics	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x184>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	4013      	ands	r3, r2
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e020      	b.n	8003790 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_RCC_ClockConfig+0x190>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800376c:	f000 f820 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003770:	0001      	movs	r1, r0
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x188>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	220f      	movs	r2, #15
 800377a:	4013      	ands	r3, r2
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x194>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	000a      	movs	r2, r1
 8003782:	40da      	lsrs	r2, r3
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x198>)
 8003786:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003788:	2003      	movs	r0, #3
 800378a:	f7fe fb71 	bl	8001e70 <HAL_InitTick>
  
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	00001388 	.word	0x00001388
 80037a4:	fffff8ff 	.word	0xfffff8ff
 80037a8:	08004304 	.word	0x08004304
 80037ac:	200000b4 	.word	0x200000b4

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b590      	push	{r4, r7, lr}
 80037b2:	b08f      	sub	sp, #60	; 0x3c
 80037b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80037b6:	2314      	movs	r3, #20
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80037be:	c313      	stmia	r3!, {r0, r1, r4}
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80037ca:	c313      	stmia	r3!, {r0, r1, r4}
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d8:	2300      	movs	r3, #0
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	220c      	movs	r2, #12
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d002      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x4a>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d003      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x50>
 80037f8:	e02f      	b.n	800385a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037fe:	e02f      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	0c9b      	lsrs	r3, r3, #18
 8003804:	220f      	movs	r2, #15
 8003806:	4013      	ands	r3, r2
 8003808:	2214      	movs	r2, #20
 800380a:	18ba      	adds	r2, r7, r2
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	220f      	movs	r2, #15
 8003816:	4013      	ands	r3, r2
 8003818:	1d3a      	adds	r2, r7, #4
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003820:	23c0      	movs	r3, #192	; 0xc0
 8003822:	025b      	lsls	r3, r3, #9
 8003824:	401a      	ands	r2, r3
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	025b      	lsls	r3, r3, #9
 800382a:	429a      	cmp	r2, r3
 800382c:	d109      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800382e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003830:	4811      	ldr	r0, [pc, #68]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003832:	f7fc fc69 	bl	8000108 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	001a      	movs	r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	4353      	muls	r3, r2
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
 8003840:	e008      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003844:	480c      	ldr	r0, [pc, #48]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003846:	f7fc fc5f 	bl	8000108 <__udivsi3>
 800384a:	0003      	movs	r3, r0
 800384c:	001a      	movs	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	4353      	muls	r3, r2
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003858:	e002      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCC_GetSysClockFreq+0xc8>)
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800385e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b00f      	add	sp, #60	; 0x3c
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	080042e4 	.word	0x080042e4
 8003870:	080042f4 	.word	0x080042f4
 8003874:	40021000 	.word	0x40021000
 8003878:	007a1200 	.word	0x007a1200

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b02      	ldr	r3, [pc, #8]	; (800388c <HAL_RCC_GetHCLKFreq+0x10>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	200000b4 	.word	0x200000b4

08003890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003894:	f7ff fff2 	bl	800387c <HAL_RCC_GetHCLKFreq>
 8003898:	0001      	movs	r1, r0
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	2207      	movs	r2, #7
 80038a2:	4013      	ands	r3, r2
 80038a4:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	40d9      	lsrs	r1, r3
 80038aa:	000b      	movs	r3, r1
}    
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	40021000 	.word	0x40021000
 80038b8:	08004314 	.word	0x08004314

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	025b      	lsls	r3, r3, #9
 80038d4:	4013      	ands	r3, r2
 80038d6:	d100      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80038d8:	e08e      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2017      	movs	r0, #23
 80038dc:	183b      	adds	r3, r7, r0
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e2:	4b5f      	ldr	r3, [pc, #380]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	4013      	ands	r3, r2
 80038ec:	d110      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	4b5c      	ldr	r3, [pc, #368]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0549      	lsls	r1, r1, #21
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
 80038fc:	4b58      	ldr	r3, [pc, #352]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	055b      	lsls	r3, r3, #21
 8003904:	4013      	ands	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390a:	183b      	adds	r3, r7, r0
 800390c:	2201      	movs	r2, #1
 800390e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b54      	ldr	r3, [pc, #336]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4013      	ands	r3, r2
 800391a:	d11a      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391c:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	0049      	lsls	r1, r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fe fae7 	bl	8001efc <HAL_GetTick>
 800392e:	0003      	movs	r3, r0
 8003930:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	e008      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fe fae2 	bl	8001efc <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e087      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4013      	ands	r3, r2
 8003950:	d0f0      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	23c0      	movs	r3, #192	; 0xc0
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d034      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	23c0      	movs	r3, #192	; 0xc0
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4013      	ands	r3, r2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d02c      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a3b      	ldr	r2, [pc, #236]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0249      	lsls	r1, r1, #9
 8003988:	430a      	orrs	r2, r1
 800398a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398c:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003992:	4936      	ldr	r1, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003994:	400a      	ands	r2, r1
 8003996:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4013      	ands	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe faa9 	bl	8001efc <HAL_GetTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e009      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe faa4 	bl	8001efc <HAL_GetTick>
 80039b4:	0002      	movs	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e048      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	2202      	movs	r2, #2
 80039ca:	4013      	ands	r3, r2
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039de:	430a      	orrs	r2, r1
 80039e0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039e2:	2317      	movs	r3, #23
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80039f2:	4920      	ldr	r1, [pc, #128]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	4013      	ands	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a02:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	2203      	movs	r2, #3
 8003a08:	4393      	bics	r3, r2
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a12:	430a      	orrs	r2, r1
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2210      	movs	r2, #16
 8003a26:	4393      	bics	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a30:	430a      	orrs	r2, r1
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a40:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	4393      	bics	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b006      	add	sp, #24
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
 8003a68:	fffffcff 	.word	0xfffffcff
 8003a6c:	fffeffff 	.word	0xfffeffff
 8003a70:	00001388 	.word	0x00001388
 8003a74:	efffffff 	.word	0xefffffff

08003a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e044      	b.n	8003b14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2274      	movs	r2, #116	; 0x74
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fe f927 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f8da 	bl	8003c74 <UART_SetConfig>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e024      	b.n	8003b14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 fa0d 	bl	8003ef4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	490d      	ldr	r1, [pc, #52]	; (8003b1c <HAL_UART_Init+0xa4>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2108      	movs	r1, #8
 8003af6:	438a      	bics	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 faa5 	bl	800405c <UART_CheckIdleState>
 8003b12:	0003      	movs	r3, r0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	fffff7ff 	.word	0xfffff7ff

08003b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dbb      	adds	r3, r7, #6
 8003b2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d000      	beq.n	8003b3a <HAL_UART_Transmit+0x1a>
 8003b38:	e096      	b.n	8003c68 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_UART_Transmit+0x28>
 8003b40:	1dbb      	adds	r3, r7, #6
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08e      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d109      	bne.n	8003b6c <HAL_UART_Transmit+0x4c>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2201      	movs	r2, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e07e      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2274      	movs	r2, #116	; 0x74
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Transmit+0x5a>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e077      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2274      	movs	r2, #116	; 0x74
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	2100      	movs	r1, #0
 8003b88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b90:	f7fe f9b4 	bl	8001efc <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1dba      	adds	r2, r7, #6
 8003b9c:	2150      	movs	r1, #80	; 0x50
 8003b9e:	8812      	ldrh	r2, [r2, #0]
 8003ba0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1dba      	adds	r2, r7, #6
 8003ba6:	2152      	movs	r1, #82	; 0x52
 8003ba8:	8812      	ldrh	r2, [r2, #0]
 8003baa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	015b      	lsls	r3, r3, #5
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d108      	bne.n	8003bca <HAL_UART_Transmit+0xaa>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e003      	b.n	8003bd2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2274      	movs	r2, #116	; 0x74
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003bda:	e02d      	b.n	8003c38 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	0013      	movs	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	f000 fa7f 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8003bee:	1e03      	subs	r3, r0, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e039      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	881a      	ldrh	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	05d2      	lsls	r2, r2, #23
 8003c06:	0dd2      	lsrs	r2, r2, #23
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	3302      	adds	r3, #2
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e008      	b.n	8003c26 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2252      	movs	r2, #82	; 0x52
 8003c2a:	5a9b      	ldrh	r3, [r3, r2]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b299      	uxth	r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2252      	movs	r2, #82	; 0x52
 8003c36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2252      	movs	r2, #82	; 0x52
 8003c3c:	5a9b      	ldrh	r3, [r3, r2]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1cb      	bne.n	8003bdc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2140      	movs	r1, #64	; 0x40
 8003c52:	f000 fa4b 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8003c56:	1e03      	subs	r3, r0, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e005      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b008      	add	sp, #32
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c7c:	231e      	movs	r3, #30
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a8d      	ldr	r2, [pc, #564]	; (8003ed8 <UART_SetConfig+0x264>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a88      	ldr	r2, [pc, #544]	; (8003edc <UART_SetConfig+0x268>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a7f      	ldr	r2, [pc, #508]	; (8003ee0 <UART_SetConfig+0x26c>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a7b      	ldr	r2, [pc, #492]	; (8003ee4 <UART_SetConfig+0x270>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d127      	bne.n	8003d4a <UART_SetConfig+0xd6>
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <UART_SetConfig+0x274>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	2203      	movs	r2, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d00d      	beq.n	8003d22 <UART_SetConfig+0xae>
 8003d06:	d81b      	bhi.n	8003d40 <UART_SetConfig+0xcc>
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d014      	beq.n	8003d36 <UART_SetConfig+0xc2>
 8003d0c:	d818      	bhi.n	8003d40 <UART_SetConfig+0xcc>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <UART_SetConfig+0xa4>
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d00a      	beq.n	8003d2c <UART_SetConfig+0xb8>
 8003d16:	e013      	b.n	8003d40 <UART_SetConfig+0xcc>
 8003d18:	231f      	movs	r3, #31
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e021      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d22:	231f      	movs	r3, #31
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	2202      	movs	r2, #2
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e01c      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d2c:	231f      	movs	r3, #31
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2204      	movs	r2, #4
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e017      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d36:	231f      	movs	r3, #31
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e012      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d40:	231f      	movs	r3, #31
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	2210      	movs	r2, #16
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e00d      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a67      	ldr	r2, [pc, #412]	; (8003eec <UART_SetConfig+0x278>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d104      	bne.n	8003d5e <UART_SetConfig+0xea>
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e003      	b.n	8003d66 <UART_SetConfig+0xf2>
 8003d5e:	231f      	movs	r3, #31
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2210      	movs	r2, #16
 8003d64:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69da      	ldr	r2, [r3, #28]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d15d      	bne.n	8003e2e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003d72:	231f      	movs	r3, #31
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d015      	beq.n	8003da8 <UART_SetConfig+0x134>
 8003d7c:	dc18      	bgt.n	8003db0 <UART_SetConfig+0x13c>
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d00d      	beq.n	8003d9e <UART_SetConfig+0x12a>
 8003d82:	dc15      	bgt.n	8003db0 <UART_SetConfig+0x13c>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <UART_SetConfig+0x11a>
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d005      	beq.n	8003d98 <UART_SetConfig+0x124>
 8003d8c:	e010      	b.n	8003db0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8e:	f7ff fd7f 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8003d92:	0003      	movs	r3, r0
 8003d94:	61bb      	str	r3, [r7, #24]
        break;
 8003d96:	e012      	b.n	8003dbe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <UART_SetConfig+0x27c>)
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e00f      	b.n	8003dbe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7ff fd07 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003da2:	0003      	movs	r3, r0
 8003da4:	61bb      	str	r3, [r7, #24]
        break;
 8003da6:	e00a      	b.n	8003dbe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	61bb      	str	r3, [r7, #24]
        break;
 8003dae:	e006      	b.n	8003dbe <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db4:	231e      	movs	r3, #30
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
        break;
 8003dbc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d100      	bne.n	8003dc6 <UART_SetConfig+0x152>
 8003dc4:	e07b      	b.n	8003ebe <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	005a      	lsls	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	18d2      	adds	r2, r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f7fc f995 	bl	8000108 <__udivsi3>
 8003dde:	0003      	movs	r3, r0
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d91c      	bls.n	8003e24 <UART_SetConfig+0x1b0>
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	025b      	lsls	r3, r3, #9
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d217      	bcs.n	8003e24 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	200e      	movs	r0, #14
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	210f      	movs	r1, #15
 8003dfe:	438a      	bics	r2, r1
 8003e00:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2207      	movs	r2, #7
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	b299      	uxth	r1, r3
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	183a      	adds	r2, r7, r0
 8003e12:	8812      	ldrh	r2, [r2, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	183a      	adds	r2, r7, r0
 8003e1e:	8812      	ldrh	r2, [r2, #0]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	e04c      	b.n	8003ebe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003e24:	231e      	movs	r3, #30
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e047      	b.n	8003ebe <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2e:	231f      	movs	r3, #31
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d015      	beq.n	8003e64 <UART_SetConfig+0x1f0>
 8003e38:	dc18      	bgt.n	8003e6c <UART_SetConfig+0x1f8>
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d00d      	beq.n	8003e5a <UART_SetConfig+0x1e6>
 8003e3e:	dc15      	bgt.n	8003e6c <UART_SetConfig+0x1f8>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <UART_SetConfig+0x1d6>
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d005      	beq.n	8003e54 <UART_SetConfig+0x1e0>
 8003e48:	e010      	b.n	8003e6c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7ff fd21 	bl	8003890 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	61bb      	str	r3, [r7, #24]
        break;
 8003e52:	e012      	b.n	8003e7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <UART_SetConfig+0x27c>)
 8003e56:	61bb      	str	r3, [r7, #24]
        break;
 8003e58:	e00f      	b.n	8003e7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7ff fca9 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	61bb      	str	r3, [r7, #24]
        break;
 8003e62:	e00a      	b.n	8003e7a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	61bb      	str	r3, [r7, #24]
        break;
 8003e6a:	e006      	b.n	8003e7a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e70:	231e      	movs	r3, #30
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
        break;
 8003e78:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01e      	beq.n	8003ebe <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	085a      	lsrs	r2, r3, #1
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	18d2      	adds	r2, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f7fc f939 	bl	8000108 <__udivsi3>
 8003e96:	0003      	movs	r3, r0
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d909      	bls.n	8003eb6 <UART_SetConfig+0x242>
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d204      	bcs.n	8003eb6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e003      	b.n	8003ebe <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb6:	231e      	movs	r3, #30
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eca:	231e      	movs	r3, #30
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	781b      	ldrb	r3, [r3, #0]
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b008      	add	sp, #32
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	efff69f3 	.word	0xefff69f3
 8003edc:	ffffcfff 	.word	0xffffcfff
 8003ee0:	fffff4ff 	.word	0xfffff4ff
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40004400 	.word	0x40004400
 8003ef0:	007a1200 	.word	0x007a1200

08003ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2201      	movs	r2, #1
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <UART_AdvFeatureConfig+0x144>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2202      	movs	r2, #2
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a43      	ldr	r2, [pc, #268]	; (800403c <UART_AdvFeatureConfig+0x148>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2204      	movs	r2, #4
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <UART_AdvFeatureConfig+0x14c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2208      	movs	r2, #8
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a34      	ldr	r2, [pc, #208]	; (8004044 <UART_AdvFeatureConfig+0x150>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2210      	movs	r2, #16
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <UART_AdvFeatureConfig+0x154>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2220      	movs	r2, #32
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4a25      	ldr	r2, [pc, #148]	; (800404c <UART_AdvFeatureConfig+0x158>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d01d      	beq.n	800400e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <UART_AdvFeatureConfig+0x15c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	035b      	lsls	r3, r3, #13
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d10b      	bne.n	800400e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <UART_AdvFeatureConfig+0x160>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	4013      	ands	r3, r2
 8004016:	d00b      	beq.n	8004030 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <UART_AdvFeatureConfig+0x164>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}
 8004038:	fffdffff 	.word	0xfffdffff
 800403c:	fffeffff 	.word	0xfffeffff
 8004040:	fffbffff 	.word	0xfffbffff
 8004044:	ffff7fff 	.word	0xffff7fff
 8004048:	ffffefff 	.word	0xffffefff
 800404c:	ffffdfff 	.word	0xffffdfff
 8004050:	ffefffff 	.word	0xffefffff
 8004054:	ff9fffff 	.word	0xff9fffff
 8004058:	fff7ffff 	.word	0xfff7ffff

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	2100      	movs	r1, #0
 800406a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800406c:	f7fd ff46 	bl	8001efc <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2208      	movs	r2, #8
 800407c:	4013      	ands	r3, r2
 800407e:	2b08      	cmp	r3, #8
 8004080:	d10c      	bne.n	800409c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0391      	lsls	r1, r2, #14
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <UART_CheckIdleState+0x8c>)
 800408c:	9200      	str	r2, [sp, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	f000 f82c 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d001      	beq.n	800409c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e021      	b.n	80040e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2204      	movs	r2, #4
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d10c      	bne.n	80040c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	03d1      	lsls	r1, r2, #15
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <UART_CheckIdleState+0x8c>)
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f000 f818 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e00d      	b.n	80040e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2274      	movs	r2, #116	; 0x74
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	01ffffff 	.word	0x01ffffff

080040ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b094      	sub	sp, #80	; 0x50
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fc:	e0a3      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004100:	3301      	adds	r3, #1
 8004102:	d100      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004104:	e09f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fd fef9 	bl	8001efc <HAL_GetTick>
 800410a:	0002      	movs	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <UART_WaitOnFlagUntilTimeout+0x30>
 8004116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004118:	2b00      	cmp	r3, #0
 800411a:	d13d      	bne.n	8004198 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411c:	f3ef 8310 	mrs	r3, PRIMASK
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	2301      	movs	r3, #1
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	494c      	ldr	r1, [pc, #304]	; (8004270 <UART_WaitOnFlagUntilTimeout+0x184>)
 800413e:	400a      	ands	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f383 8810 	msr	PRIMASK, r3
}
 800414c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
 8004158:	2301      	movs	r3, #1
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	438a      	bics	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2274      	movs	r2, #116	; 0x74
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e067      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2204      	movs	r2, #4
 80041a0:	4013      	ands	r3, r2
 80041a2:	d050      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	401a      	ands	r2, r3
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d146      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2280      	movs	r2, #128	; 0x80
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	613b      	str	r3, [r7, #16]
  return(result);
 80041c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	2301      	movs	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4923      	ldr	r1, [pc, #140]	; (8004270 <UART_WaitOnFlagUntilTimeout+0x184>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80041fa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041fe:	2301      	movs	r3, #1
 8004200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	2120      	movs	r1, #32
 8004238:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2274      	movs	r2, #116	; 0x74
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e010      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	425a      	negs	r2, r3
 8004256:	4153      	adcs	r3, r2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	001a      	movs	r2, r3
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d100      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004264:	e74b      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b014      	add	sp, #80	; 0x50
 800426e:	bd80      	pop	{r7, pc}
 8004270:	fffffe5f 	.word	0xfffffe5f

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	2600      	movs	r6, #0
 8004278:	4d0c      	ldr	r5, [pc, #48]	; (80042ac <__libc_init_array+0x38>)
 800427a:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	2600      	movs	r6, #0
 8004286:	f000 f821 	bl	80042cc <_init>
 800428a:	4d0a      	ldr	r5, [pc, #40]	; (80042b4 <__libc_init_array+0x40>)
 800428c:	4c0a      	ldr	r4, [pc, #40]	; (80042b8 <__libc_init_array+0x44>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	00b3      	lsls	r3, r6, #2
 800429a:	58eb      	ldr	r3, [r5, r3]
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	00b3      	lsls	r3, r6, #2
 80042a4:	58eb      	ldr	r3, [r5, r3]
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	0800431c 	.word	0x0800431c
 80042b0:	0800431c 	.word	0x0800431c
 80042b4:	0800431c 	.word	0x0800431c
 80042b8:	08004320 	.word	0x08004320

080042bc <memset>:
 80042bc:	0003      	movs	r3, r0
 80042be:	1882      	adds	r2, r0, r2
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d100      	bne.n	80042c6 <memset+0xa>
 80042c4:	4770      	bx	lr
 80042c6:	7019      	strb	r1, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	e7f9      	b.n	80042c0 <memset+0x4>

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
